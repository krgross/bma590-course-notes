sig.th^2 * dnorm(threshold.th, mean = 0, sd = sig.th) / k
}
max.avg.type(k = my.k, sig.th = my.sig.th)
binary.entropy <- function(p) ifelse(p>0 & p<1, -(1 - p) * log2(1 - p) - p * log2(p), 0)  # H(X), if X ~ Bernoulli(p)
prob.publish.at.theta <- function(th, x.hat, y.hat, sig.x, sig.y) {
pnorm(x.hat, mean = th, sd = sig.x, lower = F) * pnorm(y.hat, mean = th, sd = sig.y, lower = F)
}
cond.entropy <- function(x.hat, y.hat, sig.th, sig.x, sig.y) {
# calculate the conditional entropy H(Z|theta)
my.integrand <- function(th) binary.entropy(prob.publish.at.theta(th, x.hat, y.hat, sig.x, sig.y)) * dnorm(th, mean = 0, sd = sig.th)
integrate(my.integrand, -Inf, Inf)$value
}
mutual.info <- function(c, k, sig.th, sig.x, sig.y) {
ttt <- one_journal_statics(c = c, k = k, sig.th = sig.th, sig.x = sig.x, sig.y = sig.y)
mut.info <- binary.entropy(k) - cond.entropy(x.hat = ttt[1], y.hat = ttt[2], sig.th, sig.x, sig.y)
ans <- c(mut.info, ttt)
names(ans)[1] <- "mut.info"
ans
}
cost.vals <- seq(from = 0.05, to = 1, by = 0.02)
if.vals <- mi.vals <- double(length = length(cost.vals))
for (i in seq(along = cost.vals)) {
ttt <- mutual.info(cost.vals[i], k = 0.2, sig.th = 1, sig.x = 0.5, sig.y = 0.5)
if.vals[i] <- ttt[5]
mi.vals[i] <- ttt[1]
}
plot(if.vals, mi.vals, xlab = "Impact factor", ylab = "Mutual information")
cor(if.vals, mi.vals)
k.vals <- seq(from = 0.05, to = 0.7, length = 20)
if.vals <- mi.vals <- double(length = length(k.vals))
for (i in seq(along = k.vals)) {
ttt <- mutual.info(c = 0.2, k = k.vals[i], sig.th = 1, sig.x = 0.5, sig.y = 0.5)
if.vals[i] <- ttt[5]
mi.vals[i] <- ttt[1]
}
par(mfrow = c(1, 2))
plot(k.vals, if.vals, xlab = "journal capacity", ylab = "impact factor")
lines(k.vals, max.avg.type(k = k.vals, sig.th = 1), col = "red", lty = "solid")
plot(k.vals, mi.vals, xlab = "journal capacity", ylab = "mutual information", ylim = c(0, 1))
lines(k.vals, binary.entropy(k.vals), col = "red", lty = "solid")
plot(k.vals, mi.vals / binary.entropy(k.vals), xlab = "journal capacity")
for (i in seq(along = k.vals)) {
ttt <- mutual.info(c = 0.2, k = k.vals[i], sig.th = 1, sig.x = 0.01, sig.y = 0.01)
if.vals[i] <- ttt[5]
mi.vals[i] <- ttt[1]
}
par(mfrow = c(1, 2))
plot(k.vals, if.vals, xlab = "journal capacity", ylab = "impact factor")
lines(k.vals, max.avg.type(k = k.vals, sig.th = 1), col = "red", lty = "solid")
plot(k.vals, mi.vals, xlab = "journal capacity", ylab = "mutual information", ylim = c(0, 1))
lines(k.vals, binary.entropy(k.vals), col = "red", lty = "solid")
par(mfrow = c(1,2))
plot(k.vals, if.vals*k.vals, xlab = "journal capacity", ylab = expression(k * mu[1]))
plot(k.vals, if.vals * k.vals / (1 - k.vals), xlab = "journal capacity", ylab = expression(k * (mu[1]-mu[0])))
max.avg.type(k = .1, sig.th = 1)
View(max.avg.type)
?diff
mid.avg.type <- function(a, b, sig.th){
# Find the average type between the ath quantile and the bth quantile
# NB: The arguments are quantiles, not 1-quantile, as we have with max.avg.type
threshold.th <- qnorm(c(a,b), mean = 0, sd = sig.th)
sig.th^2 * diff(dnorm(threshold.th, mean = 0, sd = sig.th)) / (b-a)
}
mid.avg.type(.95,1,1)
debug(mid.avg.type)
undebug(mid.avg.type)
mid.avg.type(0,.05,1)
mid.avg.type <- function(a, b, sig.th){
# Find the average type between the ath quantile and the bth quantile
# NB: The arguments are quantiles, not 1-quantile, as we have with max.avg.type
threshold.th <- qnorm(c(b,a), mean = 0, sd = sig.th)
sig.th^2 * diff(dnorm(threshold.th, mean = 0, sd = sig.th)) / (b-a)
}
mid.avg.type <- function(a, b, sig.th){
# Find the average type between the ath quantile and the bth quantile
# NB: The arguments are quantiles, not 1-quantile, as we have with max.avg.type
threshold.th <- qnorm(c(b,a), mean = 0, sd = sig.th)
sig.th^2 * diff(dnorm(threshold.th, mean = 0, sd = sig.th)) / (b-a)
}
mid.avg.type(0.45, 0.55, 1)
mid.avg.type(0, 0.5, 1)
mid.avg.type(0.95, 1-.1/3, 1)
mid.avg.type(0.95, 1, 1)
mid.avg.type(1-.1/3, 1-.05/3, 1)
mid.avg.type(1-.05/3, 1, 1)
max.avg.type(k=.15, 1)
mid.avg.type(.8, .85, 1)
max.avg.type(k=.05, 1)
mid.avg.type(.8, .95, 1)
21/27
.9*.8*.4/(.9*(.32+.12)+.02)
(.9*.32 + .08)/(.9*(.32+.12)+.08)
.8*.36/(.8*.36+.2*.64)
.9*.2*.4/(.9*(.48+.08)+.08)
(.9*.2*.4+.02)/(.9*(.48+.08)+.02)
.2*.54/(.2*.54 + .8*46)
.2*.54/(.2*.54 + .8*.46)
.9/8/(.9/2+.1)
?rbeta
pbeta(.5,1,2)
pbeta(.5,2,1)
32/44
(54.9 + 47.6 + 19.2 + 16.6)/4
(38.6 + 36.9 + 19.7 + 14.7)/4
34.6-37.5
34.6-27.5
310.32/(1678.73/16)
?pf
pf(2.958,1,16,lower = F)
(54.9 + 47.6 + 19.2 + 16.9)/4
26.25/(1678.73/16)
pf(0.25,1,16,lower = F)
sort(2,3)
sort(c(2,3))
sort(c(3,2))
?apply
set.prior <- function(n.agent) {
y.temp <- matrix(data = runif(n.agent * 2), ncol = 2)
apply(y.temp, 1, sort)
}
set.prior(3)
set.prior(4)
View(set.prior)
rm(set.prior)
set.prior.y <- function(n.agent) {
y.temp <- matrix(data = runif(n.agent * 2), ncol = 2)
t(apply(y.temp, 1, sort))
}
set.prior.y()
set.prior.y(4)
?runif
?while
.
ttt <- 1:3
ttt[c(1,2,3,3,2,1)]
rm(ttt)
rm(set.prior.y)
ttt <- 1:3
ttt[c(1,2,3,3,2,1)]==2
sum(ttt[c(1,2,3,3,2,1)]==2)
(ttt[c(1,2,3,3,2,1)]==2) + (ttt[c(1,2,3,3,2,1)]==1)
(ttt[c(1,2,3,3,2,1)]==2) * (ttt[c(1,2,3,3,2,1)]==1)
?matrix
?array
?runif
?array
set.prior <- function(n.agent, min = 0, max = 1) {
ttt <- array(data = runif(n.agent * 4, min = min, max = max), dim = c(2, n.agent, 2), dimnames = list("act", "agent", "bound"))
t(apply(y.temp, 1, sort))
}
?droplevels
set.prior <- function(n.agent, min = 0, max = 1) {
ttt <- array(data = runif(n.agent * 4, min = min, max = max), dim = c(2, n.agent, 2), dimnames = list("act", "agent", "bound"))
for(i.act in 1:2) ttt[i.act, , ] <- t(apply(droplevels(ttt[i.act, , ]), 1, sort))
}
ttt <- set.prior(n.agent = 10)
set.prior <- function(n.agent, min = 0, max = 1) {
ttt <- array(data = runif(n.agent * 4, min = min, max = max), dim = c(2, n.agent, 2), dimnames = c("act", "agent", "bound"))
for(i.act in 1:2) ttt[i.act, , ] <- t(apply(droplevels(ttt[i.act, , ]), 1, sort))
}
ttt <- set.prior(n.agent = 10)
set.prior <- function(n.agent, min = 0, max = 1) {
ttt <- array(data = runif(n.agent * 4, min = min, max = max), dim = c(2, n.agent, 2), dimnames = as.list(c("act", "agent", "bound")))
for(i.act in 1:2) ttt[i.act, , ] <- t(apply(droplevels(ttt[i.act, , ]), 1, sort))
}
ttt <- set.prior(n.agent = 10)
set.prior <- function(n.agent, min = 0, max = 1) {
ttt <- array(data = runif(n.agent * 4, min = min, max = max), dim = c(2, n.agent, 2))
for(i.act in 1:2) ttt[i.act, , ] <- t(apply(droplevels(ttt[i.act, , ]), 1, sort))
}
set.prior(10)
set.prior <- function(n.agent, min = 0, max = 1) {
ans <- array(NA, dim = c(2, n.agent, 2))  # dimensions are: acts, agents, bounds
for (i.act in 1:2) {
ttt <- matrix(data = runif(n.agent * 2, min = min, max = max), ncol = 2)
ans[i.act, , ] <- t(apply(y.temp, 1, sort))
}
ans
}
set.prior <- function(n.agent = 10, min = 0, max = 1) {
ans <- array(NA, dim = c(2, n.agent, 2))  # dimensions are: acts, agents, bounds
for (i.act in 1:2) {
ttt <- matrix(data = runif(n.agent * 2, min = min, max = max), ncol = 2)
ans[i.act, , ] <- t(apply(y.temp, 1, sort))
}
ans
}
foo <- set.prior()
set.prior <- function(n.agent = 10, min = 0, max = 1) {
ans <- array(NA, dim = c(2, n.agent, 2))  # dimensions are: acts, agents, bounds
for (i.act in 1:2) {
ttt <- matrix(data = runif(n.agent * 2, min = min, max = max), ncol = 2)
ans[i.act, , ] <- t(apply(ttt, 1, sort))
}
ans
}
set.prior <- function(n.agent = 10, min = 0, max = 1) {
ans <- array(NA, dim = c(2, n.agent, 2))  # dimensions are: acts, agents, bounds
for (i.act in 1:2) {
ttt <- matrix(data = runif(n.agent * 2, min = min, max = max), ncol = 2)
ans[i.act, , ] <- t(apply(ttt, 1, sort))
}
ans
}
foo <- set.prior()
foo[1, ,]
foo[2, ,]
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
rum.abm()
run.abm()
run.abm(seed = 1\)
run.abm(seed = 1)
prior.n[1, ,]
prior.n[2, ,]
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
run.abm(seed = 1)
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
run.abm(seed = 1)
prior.y
prior.y[1, ,]
prior.y[2, ,]
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
run.abm(seed = 1)
trial.count
my.action
my.payoff
success.count
trial.data
success.data
success.data
run.abm(global = F,seed = 1)
trial.data
trial.count
success.data
success.count
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
run.abm(seed = 1)
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
run.abm(seed = 1)
success.data
trial.data
avg.payoff
prior.y[1, 1]
prior.y[1, 1, ]
prior.n[1, 1, ]
y[1, 1, ]
y[1, 1, ]
prior.y[1, 1, ]
prior.y[1, 2, ]
y[2, 1, ]
n[2, 1, ]
y[2, 1, ]
y[1, , ]
y[2, , ]
trial.count
trial.dta
trial.data
success.data
run.abm(max.iter = 2)
undebug(run.abm)
run.abm(max.iter = 2)
source("~/Projects/sosdci-grant/r/ip-abm.R")
run.abm(max.iter = 2)
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- run.abm()
ttt[1, ,]
ttt[2, ,]
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(run.abm)
ttt <- run.abm()
y[1, , ]
y[2, , ]
undebug(run.abm)
ttt <- run.abm()
ttt[1, ,]
ttt[2, ,]
ttt <- run.abm(seed = 1)
ttt[1, ,]
ttt[2, ,]
ttt[1, ,]
ttt <- run.abm(seed = 2)
ttt[1, ,]
ttt[2, ,]
ttt <- run.abm(seed = 1, global = F)
ttt[1, ,]
ttt[2, ,]
ttt <- run.abm(seed = 1, max.iter = 1e2, global = F)
ttt[1, ,]
ttt[2, ,]
ttt <- run.abm(seed = 1, max.iter = 1e2, global = F)
ttt[1, ,]
ttt[2, ,]
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt[2, ,]
ttt <- run.abm(seed = 1, max.iter = 1e2, global = F)
ttt
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- run.abm(seed = 1, max.iter = 1e2, global = F)
ttt
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- run.abm(seed = 1, max.iter = 1e2, global = F)
ttt
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- run.abm()
ttt
debug(run.abm)
ttt <- run.abm()
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- run.abm()
ttt
ttt <- run.abm()
ttt
ttt <- run.abm(seed =1)
ttt
ttt <- run.abm(seed =1, n.iter = 20)
ttt
ttt <- run.abm(seed =1, n.round = 20)
ttt
ttt <- run.abm(seed =1, n.round = 1e2)
ttt
ttt <- run.abm(seed =2, n.round = 1e2)
ttt
ttt <- run.abm(seed =1, n.round = 1e2, global = F)
ttt
ttt <- run.abm(seed =1, n.round = 1e4, global = F)
ttt <- run.abm(seed =1, n.round = 1e3, global = F)
ttt
ttt <- run.abm(seed =1, n.round = 1e3, global = T)
ttt
ttt <- run.abm(seed =1, n.iter = 40, n.round = 1e3, global = T)
ttt
table(ttt)
ttt <- run.abm(seed =1, n.iter = 40, n.round = 1e3, global = F)
table(ttt)
ttt <- set.prior(precise = T)
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- set.prior(precise = T)
ttt[1, , ]
ttt <- run.abm(seed =1, precise = T)
ttt
debug(run.abm)
ttt <- run.abm(seed =1, precise = T)
y[1, ,]
y[2, ,]
undebug(run.abm)
ttt <- run.abm(seed =1, n.iter = 40, n.round = 1e3, global = T, precise = T)
table(ttt)
ttt <- run.abm(seed =1, n.iter = 40, n.round = 1e3, global = F, precise = T)
table(ttt)
ttt <- run.abm(seed =1, n.iter = 1e2, n.round = 1e3, global = T, precise = F)
table(tt)
table(ttt)
ttt <- run.abm(seed =1, n.iter = 1e2, n.round = 1e3, global = T, precise = T)
ttt
table(ttt)
ttt <- run.abm(seed =1, n.iter = 1e2, n.round = 1e3, global = F, precise = F)
table(ttt)
ttt <- run.abm(seed =1, n.iter = 1e2, n.round = 1e3, global = F, precise = T)
table(ttt)
ttt <- run.abm(seed =1, n.iter = 2e2, n.round = 1e3, global = T, precise = F)
ttt <- run.abm(seed =2, n.iter = 1e2, n.round = 1e3, global = T, precise = F)
table(ttt)
ttt <- run.abm(seed =2, n.iter = 1e2, n.round = 1e3, global = T, precise = T)
table(ttt)
prop.test(x = c(27, 50), n = c(200, 200), p = NULL, alternative = "two.sided", correct = TRUE)
ttt <- run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = T, precise = T)
table(ttt)
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = F, precise = T))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = T, precise = F))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = F, precise = F))
prop.test(x = c(30, 52), n = c(200, 200), p = NULL, alternative = "two.sided", correct = TRUE)
ttt <- run.abm(seed=1, n.iter = 10, n.round = 1e3, global = T, precise = F))
ttt <- run.abm(seed=1, n.iter = 10, n.round = 1e3, global = T, precise = F)
ttt
debug(run.abm)
ttt <- run.abm(seed=1, n.iter = 10, n.round = 1e3, global = T, precise = F)
y[1, ,]
y[2, ,]
y[1, ,]
y[2, ,]
trial.data
success.data
sqrt((.47*.53)*1e4)
sqrt((.47*.53)*9971)
4817-9971*.47
130/49.8
undebug(run.abm)
ttt <- run.abm(seed=2, n.iter = 1, n.round = 1e3, global = T, precise = F)
ttt
run.abm(seed=3, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=4, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=5, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=6, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=7, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=8, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=9, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=10, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=11, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=12, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=13, n.iter = 1, n.round = 1e3, global = T, precise = F)
debug(run.abm)
run.abm(seed=13, n.iter = 1, n.round = 1e3, global = T, precise = F)
y[1,,]
y[2,,]
trial.data
run.abm(seed=13, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=13, n.iter = 1, n.round = 1e3, global = T, precise = F)
run.abm(seed=13, n.iter = 1, n.round = 1e3, global = T, precise = F)
y[1,,]
y[2,,]
my.action
undebug(run.abm)
for (j in 14:20) run.abm(seed=j, n.iter = 1, n.round = 1e3, global = T, precise = F)
for (j in 14:20) print(run.abm(seed=j, n.iter = 1, n.round = 1e3, global = T, precise = F))
for (j in 21:40) print(run.abm(seed=j, n.iter = 1, n.round = 1e3, global = T, precise = F))
for (j in 41:60) print(run.abm(seed=j, n.iter = 1, n.round = 1e3, global = T, precise = F))
for (j in 61:90) print(run.abm(seed=j, n.iter = 1, n.round = 1e3, global = T, precise = F))
source("~/Projects/sosdci-grant/r/ip-abm.R")
for (j in 21:40) print(run.abm(seed=j, n.iter = 1, n.round = 1e3, global = T, precise = F))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = T, precise = F))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = T, precise = F))
source("~/Projects/sosdci-grant/r/ip-abm.R")
table(run.abm(seed=1, n.iter = 2, n.round = 1e3, global = T, precise = F))
debug(run.abm)
table(run.abm(seed=1, n.iter = 2, n.round = 1e3, global = T, precise = F))
debug(my.choice)
source("~/Projects/sosdci-grant/r/ip-abm.R")
table(run.abm(seed=1, n.iter = 2, n.round = 1e3, global = T, precise = F))
table(run.abm(seed=1, n.iter = 1e2, n.round = 1e3, global = T, precise = F))
table(run.abm(seed=1, n.iter = 1e2, n.round = 1e3, global = T, averse = F, precise = F))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = T, averse = F, precise = T))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = T, averse = F, precise = F))
table(run.abm(seed=1, n.iter = 2e2, n.round = 1e3, global = F, averse = F, precise = F))
?list
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(big.sim)
ttt <- big.sim(n.iter = 2, n.round = 10)
my.results$global[i]
source("~/Projects/sosdci-grant/r/ip-abm.R")
debug(big.sim)
ttt <- big.sim(n.iter = 2, n.round = 10)
run.abm(seed = 1,
n.iter = n.iter,
n.round = n.round,
global = my.results$global[i],
averse = my.results$averse[i],
precise = my.results$precise[i])
my.results$output[i] <- table(c(10, 10))
my.results$output[i] <- table(c(10, 0))
?table
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- big.sim(n.iter = 2, n.round = 10)
ttt
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt
ttt <- big.sim(n.iter = 2, n.round = 10)
ttt
ttt <- big.sim(n.iter = 2, n.round = 1e3)
ttt
ttt <- big.sim(n.iter = 10, n.round = 1e3)
ttt
ttt <- big.sim(n.iter = 1e3, n.round = 1e3)
ttt <- big.sim(n.iter = 1e3, n.round = 1e3)
ttt
ttt <- big.sim(n.iter = 1e3, n.round = 1e3)
ttt
source("~/Projects/sosdci-grant/r/ip-abm.R")
ttt <- big.sim(n.iter = 1e3, n.round = 1e3)
ttt
source("~/Projects/sosdci-grant/r/ip-abm.R")
5136.89-47.56-60.17+13976.76-10.7
18983.52-3042.64
875.96 * (14/30)
963.60 * (3/32)
408.78 + 90.34
3 * (1.8 + 9 + 1.35 + .85)
moth <- read.csv("../../general/data/moth.csv", stringsAsFactors = T)
119044 * (1.5/9)
pulse <- read.table("C:/Users/krgross/Documents/Teaching/data/pulse.f23.txt", head =T)
summary(pulse)
with(pulse, plot(pulse ~ height, pch = 16))
fm1 <- with(pulse, lm(pulse ~ height))
summary(fm1)
abline(fm1)
with(pulse, plot(pulse ~ height, pch = 16, xlab = "height (cm)"))
abline(fm1)
with(pulse, plot(pulse ~ height, pch = 16, xlab = "height (cm)", ylab = "pulse rate (bpm)"))
abline(fm1)
pulse <- read.table("C:/Users/krgross/Documents/Teaching/data/pulse.ALL.txt", head =T, stringsAsFactors = T)
with(pulse, plot(pulse ~ height, pch = 16, xlab = "height (cm)", ylab = "pulse rate (bpm)"))
with(pulse, plot(pulse ~ cm, pch = 16, xlab = "height (cm)", ylab = "pulse rate (bpm)"))
fm1 <- with(pulse, lm(pulse ~ cm))
summary(fm1)
abline(fm1)
185/2.54
horse <- read.csv("../../general/data/horse.csv",
header = TRUE,
stringsAsFactors = TRUE)
getws()
getwd()
cd ("GitHub/bma590-course-notes/")
setwd("GitHub/bma590-course-notes/")
bookdown::preview_chapter("index.Rmd", bookdown::gitbook)
bookdown::preview_chapter("index.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("index.Rmd", "bookdown::gitbook")
