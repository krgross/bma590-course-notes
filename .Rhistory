lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm0 <- lm(log(sources) ~ 1, data = st19)
anova(fm0, fm3)
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
par(mfrow = c(1, 2))
for (i in 1:2) plot(st19$depth, linear.basis[, i], xlab = "depth", ylab = "basis function")
cubic.basis <- bs(st19$depth, df = 6)
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
par(mfrow = c(1, 2))
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.975, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.025, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth, bs = "cr"), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
summary(st19.sspline)
with(st19, plot(log(sources) ~ depth))
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth, bs = "cr"), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
summary(st19.sspline)
rm(list = ls())
require(mgcv)
bird <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/Loyn.txt", head = T)
summary(bird)
bird <- bird[, -1]
pairs(bird)
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + s(GRAZE) + s(ALT),
data = bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT),
data = bird)
summary(bird.am1)
par(mfrow = c(2, 3))
plot(bird.am1)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.am2)
plot(bird.am2)
bird$fGRAZE <- as.factor(bird$GRAZE)
head(bird)
summary(bird)
bird.am3 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
summary(bird.am3)
AIC(bird.am2)
AIC(bird.am3)
bird.am4 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am4$residuals)
abline(h = 0, lty = "dashed")
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
bird.gam7 <- lm(ABUND ~ bs(L.AREA, df = 3) + GRAZE, data = bird)
bird.gam8 <- lm(ABUND ~ bs(L.AREA, df = 3) + fGRAZE, data = bird)
anova(bird.gam7, bird.gam8, test = "F")
bird.am3 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
summary(bird.am3)
bird.am3 <- gam(ABUND ~ s(L.AREA), data = bird)
summary(bird.am3)
bird.am3 <- gam(ABUND ~ s(L.AREA, k = 20), data = bird)
summary(bird.am3)
bird.am3 <- gam(ABUND ~ s(L.AREA, k = 50), data = bird)
bird.am3 <- gam(ABUND ~ s(L.AREA, k = 40), data = bird)
bird.am3 <- gam(ABUND ~ s(L.AREA, k = 30), data = bird)
summary(bird.am3)
bird.am3 <- gam(ABUND ~ s(L.AREA, k = 3), data = bird)
summary(bird.am3)
?gam
## download the data from the book's website
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st19 <- subset(isit, Station == 19)
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(sources ~ depth))
with(st19, plot(log(sources) ~ depth))
library(splines)
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1500), degree = 1), data = st19)
?bs
summary(fm1)
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
par(mfrow = c(1, 2))
for (i in 1:2) plot(st19$depth, linear.basis[, i], xlab = "depth", ylab = "basis function")
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
fm1.pred <- predict(fm1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.975, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.025, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000)), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
summary(fm2)
abline(v = 1500, lty = "dotted")
abline(v = c(1000, 2000), lty = "dotted")
cubic.basis <- bs(st19$depth, df = 6)
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
fm3 <- lm(log(sources) ~ bs(depth, df = 8), data = st19)
cubic.basis <- bs(st19$depth, knots = c(1000, 2000))
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
fm3 <- lm(log(sources) ~ bs(depth, df = 8), data = st19)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm0 <- lm(log(sources) ~ 1, data = st19)
anova(fm0, fm3)
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
par(mfrow = c(1, 2))
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
?ns
summary(fm4)
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth, bs = "cr"), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
summary(st19.sspline)
rm(list = ls())
require(mgcv)
bird <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/Loyn.txt", head = T)
summary(bird)
bird <- bird[, -1]
pairs(bird)
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + s(GRAZE) + s(ALT),
data = bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT),
data = bird)
summary(bird.am1)
par(mfrow = c(2, 3))
plot(bird.am1)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.am2)
plot(bird.am2)
bird.am3 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am4$residuals)
bird.am3 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am3$residuals)
abline(h = 0, lty = "dashed")
bird$fGRAZE <- as.factor(bird$GRAZE)
head(bird)
summary(bird)
bird.am4 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
summary(bird.am3)
summary(bird.am4)
AIC(bird.am2)
AIC(bird.am4)
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
bird.gam7 <- lm(ABUND ~ bs(L.AREA, df = 3) + GRAZE, data = bird)
bird.gam8 <- lm(ABUND ~ bs(L.AREA, df = 3) + fGRAZE, data = bird)
anova(bird.gam7, bird.gam8, test = "F")
?gam
bird.am9 <- gam(ABUND ~ s(L.AREA) + fGRAZE, select = TRUE, data = bird)
summary(bird.am9)
bird.am10 <- gam(ABUND ~ s(L.AREA), select = FALSE, data = bird)
bird.am11 <- gam(ABUND ~ s(L.AREA), select = TRUE, data = bird)
summary(bird.am10)
summary(bird.am11)
bird.am9 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + fGRAZE + s(ALT),
select = TRUE, data = bird)
summary(bird.am9)
summary(bird.am9)
plot(bird.am9)
bird.am10 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + fGRAZE + s(ALT),
select = TRUE, gamma = 1.4, data = bird)
summary(bird.am10)
plot(bird.am10)
plot(bird.am4)
## download the data from the book's website
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st19 <- subset(isit, Station == 19)
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(sources ~ depth))
with(st19, plot(log(sources) ~ depth))
library(splines)
?bs
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1500), degree = 1), data = st19)
summary(fm1)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
fm1.pred <- predict(fm1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.975, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.025, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
abline(v = 1500, lty = "dotted")
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000), basis = 2), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000), degree = 2), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm3 <- lm(log(sources) ~ bs(depth, df = 8), data = st19)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000), degree = 1), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 1500, 2000), degree = 3), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm3 <- lm(log(sources) ~ bs(depth, df = 12), data = st19)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm3 <- lm(log(sources) ~ bs(depth, df = 20), data = st19)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
par(mfrow = c(1, 2))
for (i in 1:2) plot(st19$depth, linear.basis[, i], xlab = "depth", ylab = "basis function")
summary(fm1)
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1500), degree = 1), data = st19)
summary(fm1)
aic(fm1)
AIC(fm1)
fm0 <- lm(log(sources) ~ 1, data = st19)
anova(fm0, fm1)
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000), degree = 3), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
par(mfrow = c(1, 2))
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
summary(st19.sspline)
?mgcv::gam
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
summary(st19.sspline)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19, select = TRUE, gamma = 1.4)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
par(mfrow = c(2, 2))
rm(list = ls())
require(mgcv)
bird <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/Loyn.txt", head = T)
summary(bird)
bird <- bird[, -1]
pairs(bird)
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
pairs(bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) +
s(GRAZE) + s(ALT), data = bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) +
s(YR.ISOL) + GRAZE + s(ALT),
data = bird)
summary(bird.am1)
par(mfrow = c(2, 3))
plot(bird.am1)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
GRAZ
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.am2)
plot(bird.am2)
bird.am3 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am3$residuals)
abline(h = 0, lty = "dashed")
rdu <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/rdu-temperature.txt", head = T)
# remove NA's, coded as -99
with(rdu, table(temp == -99))
rdu <- subset(rdu, temp > -99)
yr_avg <- with(subset(rdu, yr < 2025), aggregate(temp, list(yr), FUN = mean))
names(yr_avg) <- c("year", "avg_temp")
with(yr_avg, plot(avg_temp ~ year))
require(nlme)
birds <- read.table("C:/Users/krgross/Documents/Teaching/bma590/general/ZuurDataMixedModelling/Hawaii.txt", head = T)
## extract moorhen data
moorhen <- birds[, c("Year", "Rainfall", "Moorhen.Kauai")]
## rename variables
names(moorhen) <- c("year", "rainfall", "abundance")
## remove NAs
moorhen <- na.omit(moorhen)
with(moorhen, plot(abundance ~ year))
with(moorhen, plot(log(abundance) ~ year))
with(moorhen, plot(log(abundance) ~ rainfall))
fm1 <- nlme::gls(log(abundance) ~ rainfall + year,
data = moorhen)
plot(residuals(fm1) ~ moorhen$year)
abline(h = 0, lty = "dotted")
acf(residuals(fm1))
fm2 <- nlme::gls(log(abundance) ~ rainfall + year,
data = moorhen,
correlation = corAR1(form = ~ year))
summary(fm2)
summary(fm1)
?residuals.gls
acf(residuals(fm2, type = "normalized"))
anova(fm1, fm2)
data("Wheat2")
summary(Wheat2)
with(Wheat2, plot(x = longitude, y = latitude,
pch = as.numeric(Block)))
fm1 <- nlme::gls(yield ~ variety, data = Wheat2)
plot(Variogram(fm1, form = ~ latitude + longitude))
require(plotly)
plot_ly(x = Wheat2$latitude,
y = Wheat2$longitude,
z = resid(fm1),
type = "scatter3d",
mode = "markers",
color = resid(fm1))
fm2 <- nlme::gls(yield ~ variety, data = Wheat2,
correlation = corSpher(c(28, 0.2),  # must supply starting values for range, nugget
form = ~ latitude + longitude,
nugget = TRUE))  # need to supply starting values
plot_ly(y = Wheat2$latitude,
x = Wheat2$longitude,
z = resid(fm1),
type = "scatter3d",
mode = "markers",
color = resid(fm1))
require(lme4)
data(Dyestuff)
summary(Dyestuff)
with(Dyestuff, stripchart(Yield ~ Batch, pch = 16))
fm1 <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm1)
ranef(fm1)
(batch.conditional.modes <- (fixef(fm2) + ranef(fm2)$Batch$`(Intercept)`))
rm(list = ls())
require(lme4)
data(Dyestuff)
summary(Dyestuff)
with(Dyestuff, stripchart(Yield ~ Batch, pch = 16))
fm1 <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm1)
ranef(fm1)
(batch.conditional.modes <- (fixef(fm1) + ranef(fm1)$Batch$`(Intercept)`))
(batch.means <- with(Dyestuff, tapply(Yield, Batch, mean)))
plot(x    = batch.means,
y    = batch.conditional.modes,
xlim = range(batch.means),
ylim = range(batch.means),
xlab = "sample means",
ylab = "conditional modes",
pch  = LETTERS[1:6])
abline(a = 0, b = 1)
fm1.ML <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff, REML = FALSE)
summary(fm1.ML)
pr <- profile(fm1.ML)
lattice::xyplot(pr)
lattice::xyplot(pr, absVal = TRUE)
confint(pr, level = 0.99)
lattice::splom(pr)
1527.5 + 19.38 *  qt(c(0.025, 0.975), df = 5)
require(lme4)
moth <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
logit <- function(x) log(x / (1 - x))
moth$logit_removed <- with(moth, logit(removed / placed))
with(moth, plot(logit_removed ~ distance, type = "n"))
with(subset(moth, morph == "dark"), points(logit_removed ~ distance, pch = 16))
with(subset(moth, morph == "light"), points(logit_removed ~ distance, pch = 1))
mm1 <- lmer(logit_removed ~ distance * morph + (1 | location), data = moth)
summary(mm1)
summary(mm1)
with(moth, plot(logit_removed ~ distance, type = "n"))
with(subset(moth, morph == "dark"), points(logit_removed ~ distance, pch = 16))
with(subset(moth, morph == "light"), points(logit_removed ~ distance, pch = 1))
abline(a = -1.1233, b = 0.01819) # dark fit
abline(a = -1.1233 + 0.3738, b = 0.01819 - 0.02758, lty = "dashed")  # light fit
pr <- profile(mm1.ML)
mm1.ML <- lmer(logit_removed ~ distance * morph + (1 | location), data = moth, REML = FALSE)
pr <- profile(mm1.ML)
lattice::xyplot(pr)
lattice::xyplot(pr, absVal = TRUE)
confint(pr, level = .95)
mm1a <- lmerTest::lmer(logit_removed ~ distance * morph + (1 | location), data = moth)
summary(mm1a)
gls_fit <- nlme::gls(logit_removed ~ distance * morph, data = moth, correlation = corCompSymm(form = ~ 1 | location))
summary(gls_fit)
fm1 <- lm(logit_removed ~ distance * morph + location, data = moth)
summary(fm1)
moth2 <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/moth2.txt", head = TRUE, stringsAsFactors = TRUE)
head(moth2, n = 3)
logit <- function(x) log(x / (1 - x))
moth2$logit.diff <- with(moth2, logit(d.removed / d.placed) - logit(l.removed / l.placed))
fm1 <- lm(logit.diff ~ distance, data = moth2)
with(moth2, plot(elogit.diff ~ distance,
xlab = "distance from city center (km)",
ylab = "difference in log odds of removal, dark - light"))
abline(h = 0, lty = "dashed")
with(moth2, plot(logit.diff ~ distance,
xlab = "distance from city center (km)",
ylab = "difference in log odds of removal, dark - light"))
abline(h = 0, lty = "dashed")
abline(fm1)
summary(fm1)
data(Dyestuff2)
summary(Dyestuff2)
with(Dyestuff2, stripchart(Yield ~ Batch, pch = 16))
require(nlme)
fm5 <- gls(Yield ~ 1, data = Dyestuff2, correlation = corCompSymm(form = ~ 1 | Batch))
summary(fm5)
fm6 <- lme4::lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff2)
summary(fm6)
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
