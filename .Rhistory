jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
with(jagsfit$BUGSoutput$sims.list, hexbinplot(b1 ~ b0, colramp = rf))
cricket.model2 <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dnorm (mu[j], tau)  # data model:  the likelihood
# note that BUGS / JAGS uses precision
# instead of variance
mu[j] <- b0 + b1 * x[j]    # compute the mean for each observation
}
b0 ~ dnorm (0.0, 1E-4)       # prior for intercept
b1 ~ dnorm (0.0, 1E-4)       # prior for slope
tau ~ dgamma (0.1, 0.001)    # prior for tau (inverse of the error variance)
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
sigma <- pow(tau, -1/2)      # the SD of the errors
}
set.seed(1)
jagsfit2 <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model2,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit2)
require(rstanarm)
stanarm.cricket.fit <- stan_glm(chirps ~ temp.ctr, data = cricket,
family = gaussian, seed = 1)
print(stanarm.cricket.fit, digits = 3)
mcmc.sims <- as.matrix(stanarm.cricket.fit)
summary(mcmc.sims)
apply(mcmc.sims, 2, sd)
apply(mcmc.sims, 2, function(x) quantile(x, c(0.025, 0.975)))
set.seed(1)
mu0 <- 0
tau0 <- 1
tau1 <- 1
xvals <- seq(from = -3, to = 6, length = 100)
plot(xvals, dnorm(xvals, mean = mu0, sd = sqrt(1 / tau0), type = "l"))
?dnorm
xvals <- seq(from = -3, to = 6, length = 100)
plot(xvals, dnorm(xvals, mean = mu0, sd = sqrt(1 / tau0)), type = "l")
y <- rnorm(mean = 3, sd = sqrt(1 / tau1))
lines(xvals, dnorm(y, mean = xvals, sd = sqrt(1 / tau1)), lty = "dashed")
y <- rnorm(n = 1, mean = 3, sd = sqrt(1 / tau1))
lines(xvals, dnorm(y, mean = xvals, sd = sqrt(1 / tau1)), lty = "dashed")
post.mean <- (mu0 * tau0 + y * tau1) / (tau0 + tau1)
post.tau <- tau0 + tau1
lines(xvals, dnorm(xvals, mean = post.mean, sd = sqrt(1 / post.tau)), col = "red")
set.seed(1)
mu0 <- 0
tau0 <- 1
tau1 <- 1
y <- rnorm(n = 1, mean = 10, sd = sqrt(1 / tau1))
post.mean <- (mu0 * tau0 + y * tau1) / (tau0 + tau1)
post.tau <- tau0 + tau1
xvals <- seq(from = -3, to = 13, length = 300)
plot(xvals, dnorm(xvals, mean = post.mean, sd = sqrt(1 / post.tau)), type = "l", col = "red")
lines(xvals, dnorm(xvals, mean = mu0, sd = sqrt(1 / tau0)))
lines(xvals, dnorm(y, mean = xvals, sd = sqrt(1 / tau1)), lty = "dashed")
axis(1, at = y, lab = "y", col = "blue")
gauss.update <- function(mu0 = 0, tau0 = 1, mu1 = 10, tau1 = 1, seed = NA){
if(!is.na(seed)) set.seed(seed)
y <- rnorm(n = 1, mean = mu1, sd = sqrt(1 / tau1))
post.mean <- (mu0 * tau0 + y * tau1) / (tau0 + tau1)
post.tau <- tau0 + tau1
xvals <- seq(from = -3, to = 13, length = 300)
plot(xvals, dnorm(xvals, mean = post.mean, sd = sqrt(1 / post.tau)), type = "l", col = "red")
axis(1, at = y, lab = "y", col = "blue")
lines(xvals, dnorm(xvals, mean = mu0, sd = sqrt(1 / tau0)))
lines(xvals, dnorm(y, mean = xvals, sd = sqrt(1 / tau1)), lty = "dashed")
}
gauss.update()
gauss.update <- function(mu0 = 0, tau0 = 1, mu1 = 10, tau1 = 1, seed = NA){
if(!is.na(seed)) set.seed(seed)
y <- rnorm(n = 1, mean = mu1, sd = sqrt(1 / tau1))
post.mean <- (mu0 * tau0 + y * tau1) / (tau0 + tau1)
post.tau <- tau0 + tau1
low.x <- mu0 - 3 * sqrt(1 / tau0)
high.x <- mu1 + 3 * sqrt(1 / tau1)
xvals <- seq(from = low.x, to = high.x, length = 300)
plot(xvals, dnorm(xvals, mean = post.mean, sd = sqrt(1 / post.tau)), type = "l", col = "red")
axis(1, at = y, lab = "y", col = "blue")
lines(xvals, dnorm(xvals, mean = mu0, sd = sqrt(1 / tau0)))
lines(xvals, dnorm(y, mean = xvals, sd = sqrt(1 / tau1)), lty = "dashed")
}
gauss.update()
gauss.update(mu1 = 1)
horse <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/horse.txt",
header = TRUE,
stringsAsFactors = TRUE)
require(R2jags)
horse.model <- function() {
for (j in 1:J) {             # J = 280, number of data points
y[j] ~ dpois (lambda)      # data model:  the likelihood
}
lambda ~ dgamma (0.01, 0.01) # prior
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
}
horse.model <- function() {
for (j in 1:J) {             # J = 280, number of data points
y[j] ~ dpois (lambda)      # data model:  the likelihood
}
lambda ~ dgamma (7, 3.5) # prior
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
}
jags.data <- list(y = horse$deaths, J = length(horse$deaths))
jags.params <- c("lambda")
jags.inits <- function(){
list("lambda" = rgamma(0.01, 0.01))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
jags.inits <- function(){
list("lambda" = rgamma(7, 3.5))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
jags.inits <- function(){
list("lambda" = rgamma(7.0, 3.5))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
rm(list = ls())
require(R2jags)
cricket <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/cricket.txt", header = TRUE)
cricket.slr <- lm(chirps ~ temperature, data = cricket)
summary(cricket.slr)
plot(chirps ~ temperature, data = cricket)
abline(cricket.slr)
cricket.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dnorm (mu[j], tau)  # data model:  the likelihood
# note that BUGS / JAGS uses precision
# instead of variance
mu[j] <- b0 + b1 * x[j]    # compute the mean for each observation
}
b0 ~ dnorm (0.0, 1E-6)       # prior for intercept
b1 ~ dnorm (0.0, 1E-6)       # prior for slope
tau ~ dgamma (0.01, 0.01)    # prior for tau (inverse of the error variance)
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
sigma <- pow(tau, -1/2)      # the SD of the errors
}
jags.data <- list(y = cricket$chirps,
x = cricket$temperature,
J = nrow(cricket))
jags.params <- c("b0", "b1", "tau", "sigma")
jags.inits <- function(){
list("b0" = rnorm(1), "b1" = rnorm(1), "tau" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
str(jagsfit)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
coda::HPDinterval(as.mcmc(mcmc.output))
plot(density(mcmc.output$b1))
with(mcmc.output, plot(b1 ~ b0))
library(hexbin)
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11, 'Spectral')))
with(mcmc.output, hexbinplot(b1 ~ b0, colramp = rf))
cor(mcmc.output)
cor(mcmc.output[, -c(3, 5)])
cricket$temp.ctr <- cricket$temperature - mean(cricket$temperature)
jags.data <- list(y = cricket$chirps,
x = cricket$temp.ctr,
J = nrow(cricket))
jags.params <- c("b0", "b1", "tau", "sigma")
jags.inits <- function(){
list("b0" = rnorm(1), "b1" = rnorm(1), "tau" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
with(jagsfit$BUGSoutput$sims.list, hexbinplot(b1 ~ b0, colramp = rf))
with(jagsfit$BUGSoutput$sims.list, cor(b0, b1))
cricket.model2 <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dnorm (mu[j], tau)  # data model:  the likelihood
# note that BUGS / JAGS uses precision
# instead of variance
mu[j] <- b0 + b1 * x[j]    # compute the mean for each observation
}
b0 ~ dnorm (0.0, 1E-4)       # prior for intercept
b1 ~ dnorm (0.0, 1E-4)       # prior for slope
tau ~ dgamma (0.1, 0.001)    # prior for tau (inverse of the error variance)
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
sigma <- pow(tau, -1/2)      # the SD of the errors
}
set.seed(1)
jagsfit2 <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model2,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit2)
require(rstanarm)
stanarm.cricket.fit <- stan_glm(chirps ~ temp.ctr, data = cricket,
family = gaussian, seed = 1)
rm(list = ls())
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st16 <- subset(isit, Station == 16)
st16 <- st16[, c("SampleDepth", "Sources")]
names(st16) <- c("depth", "sources")
with(st16, plot(sources ~ depth))
?loess
st16.lo <- loess(sources ~ depth, data = st16)
summary(st16.lo)
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
?loess
?predict.loess
?predict.lm
?predict.loess
st16.fit <- predict(object  = st16.lo,
newdata = depth.vals,
se      = TRUE)
with(st16, plot(sources ~ depth))
lines(x = depth.vals, y = st16.fit$fit, col = "blue")
# add 95% error bars
lines(x   = depth.vals,
y   = st16.fit$fit + st16.fit$se.fit * qt(p = .975, df = st16.fit$df),
col = "blue",
lty = "dashed")
lines(x   = depth.vals,
y   = st16.fit$fit - st16.fit$se.fit * qt(p = .975, df = st16.fit$df),
col = "blue",
lty = "dashed")
names(st16.lo)  # they are!
plot(st16.lo$residuals ~ st16$depth)
abline(h = 0, lty = "dotted")
PlotLoessFit <- function(x, y, return.fit = FALSE, ...){
# Caluclates a loess fit with the 'loess' function, and makes a plot
#
# Args:
#   x: predictor
#   y: response
#   return.fit: logical
#   ...: Optional arguments to loess
#
# Returns:
#   the loess fit
my.lo <- loess(y ~ x, ...)
x.vals <- seq(from = min(x), to = max(x), length = 100)
my.fit <- predict(object  = my.lo,
newdata = x.vals,
se      = TRUE)
plot(x, y)
lines(x = x.vals, y = my.fit$fit, col = "blue")
lines(x   = x.vals,
y   = my.fit$fit + my.fit$se.fit * qt(p = .975, df = my.fit$df),
col = "blue",
lty = "dashed")
lines(x   = x.vals,
y   = my.fit$fit - my.fit$se.fit * qt(p = .975, df = my.fit$df),
col = "blue",
lty = "dashed")
if (return.fit) {
return(my.lo)
}
}
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.5)
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.25)
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.1)
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.25, degree = 1)
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 6, fx = TRUE), data = st16)
horse <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/horse.txt",
header = TRUE,
stringsAsFactors = TRUE)
require(R2jags)
horse.model <- function() {
for (j in 1:J) {             # J = 280, number of data points
y[j] ~ dpois (lambda)      # data model:  the likelihood
}
lambda ~ dgamma (7, 3.5) # prior
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
}
jags.data <- list(y = horse$deaths, J = length(horse$deaths))
jags.params <- c("lambda")
jags.inits <- function(){
list("lambda" = rgamma(0.1, 0.1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
horse <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/horse.txt",
header = TRUE,
stringsAsFactors = TRUE)
require(R2jags)
horse.model <- function() {
for (j in 1:J) {             # J = 280, number of data points
y[j] ~ dpois (lambda)      # data model:  the likelihood
}
lambda ~ dgamma (7, 3.5) # prior
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
}
jags.data <- list(y = horse$deaths, J = length(horse$deaths))
jags.params <- c("lambda")
jags.inits <- function(){
list("lambda" = rgamma(0.1, 0.1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = horse.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
rm(list = ls())
rm(list = ls())
require(R2jags)
cricket <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/cricket.txt", header = TRUE)
cricket.slr <- lm(chirps ~ temperature, data = cricket)
summary(cricket.slr)
plot(chirps ~ temperature, data = cricket)
abline(cricket.slr)
cricket.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dnorm (mu[j], tau)  # data model:  the likelihood
# note that BUGS / JAGS uses precision
# instead of variance
mu[j] <- b0 + b1 * x[j]    # compute the mean for each observation
}
b0 ~ dnorm (0.0, 1E-6)       # prior for intercept
b1 ~ dnorm (0.0, 1E-6)       # prior for slope
tau ~ dgamma (0.01, 0.01)    # prior for tau (inverse of the error variance)
# note that BUGS / JAGS parameterizes
# gamma by shape, rate
sigma <- pow(tau, -1/2)      # the SD of the errors
}
jags.data <- list(y = cricket$chirps,
x = cricket$temperature,
J = nrow(cricket))
jags.params <- c("b0", "b1", "tau", "sigma")
jags.inits <- function(){
list("b0" = rnorm(1), "b1" = rnorm(1), "tau" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
print(jagsfit)
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
coda::HPDinterval(as.mcmc(mcmc.output))
plot(density(mcmc.output$b1))
with(mcmc.output, plot(b1 ~ b0))
library(hexbin)
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11, 'Spectral')))
with(mcmc.output, hexbinplot(b1 ~ b0, colramp = rf))
cricket$temp.ctr <- cricket$temperature - mean(cricket$temperature)
jags.data <- list(y = cricket$chirps,
x = cricket$temp.ctr,
J = nrow(cricket))
jags.params <- c("b0", "b1", "tau", "sigma")
jags.inits <- function(){
list("b0" = rnorm(1), "b1" = rnorm(1), "tau" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = cricket.model,
n.chains           = 3,
n.iter             = 5000)
print(jagsfit)
with(jagsfit$BUGSoutput$sims.list, hexbinplot(b1 ~ b0, colramp = rf))
with(jagsfit$BUGSoutput$sims.list, cor(b0, b1))
plot(chirps ~ temperature, data = cricket, type = "n")
subset.samples <- sample(nrow(mcmc.output), size = 100)
for(i in subset.samples) {
with(mcmc.output, abline(a = b0[i], b = b1[i], col = "deepskyblue", lwd = 0.25))
}
with(cricket, points(chirps ~ temperature, pch = 16))
with(mcmc.output, abline(a = mean(b0), b = mean(b1), col = "purple3", lwd = 3))
gauss.update <- function(mu0 = 0, tau0 = 1, mu1 = 10, tau1 = 1, seed = NA){
if(!is.na(seed)) set.seed(seed)
y <- rnorm(n = 1, mean = mu1, sd = sqrt(1 / tau1))
post.mean <- (mu0 * tau0 + y * tau1) / (tau0 + tau1)
post.tau <- tau0 + tau1
low.x <- mu0 - 3 * sqrt(1 / tau0)
high.x <- mu1 + 3 * sqrt(1 / tau1)
xvals <- seq(from = low.x, to = high.x, length = 300)
plot(xvals, dnorm(xvals, mean = post.mean, sd = sqrt(1 / post.tau)), type = "l", col = "red")
axis(1, at = y, lab = "y", col = "blue")
lines(xvals, dnorm(xvals, mean = mu0, sd = sqrt(1 / tau0)))
lines(xvals, dnorm(y, mean = xvals, sd = sqrt(1 / tau1)), lty = "dashed")
}
gauss.update()
rm(list = ls())
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st16 <- subset(isit, Station == 16)
st16 <- st16[, c("SampleDepth", "Sources")]
names(st16) <- c("depth", "sources")
with(st16, plot(sources ~ depth))
head(st16)
st16.spline <- mgcv::gam(sources ~ s(depth, k = 20), data = st16)
plot(st16.spline, se = TRUE)  # note that the plot does not include the intercept
st16.spline <- mgcv::gam(sources ~ s(depth, k = 20), data = st16)
plot(st16.spline, se = TRUE)  # note that the plot does not include the intercept
getwd()
setwd(:C"/Users/krgross/Documents/GitHub/bma590-course-notes/")
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
