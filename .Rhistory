family = "poisson",
data = horse)
summary(fm1)
exp(-0.4359)
plot(unique(horse$year), ranef(fm1)$year[[1]])
abline(h = 0, lty = "dashed")
yr.avg <- with(horse, tapply(deaths, as.factor(year), FUN = mean))
plot(yr.avg - mean(yr.avg), ranef(fm1)$year[[1]])
abline(a = 0, b = 1)
pp <- profile(fm1)
confint(pp)
lattice::xyplot(pp, absVal = TRUE)
lattice::splom(pp)
fm2 <- glmer(deaths ~ yr.ctr + (1 | year) + (1 | corps),
family = "poisson",
data = horse)
head(horse)
horse$index <- 1:nrow(horse)
fm1 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps) + (1 | index),
family = "poisson",
data = horse)
summary(fm1)
maple <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/maple.txt", head = TRUE,
stringsAsFactors = TRUE)
maple$trt <- as.factor(maple$alum)
fm1 <- lmerTest::lmer(log(height) ~ trt * week + (1 + week | trt:tree), data = maple)
summary(fm1)
anova(fm1)
# remotes::install_github("datalorax/equatiomatic")
library(equatiomatic)
equatiomatic::extract_eq(fm1)
summary(maple)
fm2 <- lmerTest::lmer(log(height) ~ alum * week + (1 + week | trt:tree), data = maple)
## heed the warning and rescale the aluminum predictor
maple$alum2 <- maple$alum / 100
alum2
fm2 <- lmerTest::lmer(log(height) ~ alum2 * week + (1 + week | trt:tree), data = maple)
summary(fm2)
fm2a <- lmerTest::lmer(log(height) ~ alum2 * week + (1 + week | trt:tree), data = maple)
pp <- profile(fm2a)
lattice::xyplot(pp, absVal = TRUE)
confint(pp)
equatiomatic::extract_eq(fm2)
summary(fm2)
library(MASS)
data(mcycle)
with(mcycle, plot(accel ~ times))
?mcycle
my.gamma <- function(x) dgamma(x, shape = 0.1, rate = 0.1)
curve(my.gamma, from = 0, to = 10)
qgamma(0.5, shape = 0.1, rate = 0.1)
abline(h = 0, col ="gray")
curve(my.gamma, from = 0, to = 10, xlab = expression(tau^2))
qgamma(0.5, shape = 0.1, rate = 0.1)
curve(my.gamma, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
curve(my.invgamma, from = 0, to = 10, xlab = expression(sigma^2), ylab = expression(pi(sigma^2)))
require(invgamma)
my.invgamma <- function(x) dinvgamma(x, shape = 0.01, rate = 0.01)
curve(my.invgamma, from = 0, to = 10, xlab = expression(sigma^2), ylab = expression(pi(sigma^2)))
?curve
abline(h = 0, col ="gray")
qinvgamma(0.5, shape = 0.1, rate = 0.1)
curve(my.gamma, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
curve(my.gamma2, from = 0, to = 10, add = T, col = "blue")
my.gamma2 <- function(x) dgamma(x, shape = 0.01, rate = 0.01)
curve(my.gamma2, from = 0, to = 10, add = T, col = "blue")
abline(h = 0, col ="gray")
qgamma(0.5, shape = 0.1, rate = 0.1)
curve(my.invgamma2, from = 0, to = 10, add = T, col = "blue")
my.invgamma2 <- function(x) dinvgamma(x, shape = 0.01, rate = 0.01)
curve(my.invgamma, from = 0, to = 10, xlab = expression(sigma^2), ylab = expression(pi(sigma^2)))
curve(my.invgamma2, from = 0, to = 10, add = T, col = "blue")
curve(my.invgamma, from = 0, to = 10, xlab = expression(sigma^2), ylab = expression(pi(sigma^2)))
my.invgamma <- function(x) dinvgamma(x, shape = 0.1, rate = 0.1)
my.invgamma2 <- function(x) dinvgamma(x, shape = 0.01, rate = 0.01)
curve(my.invgamma, from = 0, to = 10, xlab = expression(sigma^2), ylab = expression(pi(sigma^2)))
curve(my.invgamma2, from = 0, to = 10, add = T, col = "blue")
abline(h = 0, col ="gray")
qinvgamma(0.5, shape = 0.01, rate = 0.01)
qgamma(0.5, shape = 0.01, rate = 0.01)
my.gamma <- function(x) dgamma(x, shape = 0.1, rate = 0.1)
my.gamma2 <- function(x) dgamma(x, shape = 0.01, rate = 0.01)
curve(my.gamma, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
curve(my.gamma2, from = 0, to = 10, add = T, col = "blue")
abline(h = 0, col ="gray")
qgamma(0.5, shape = 0.1, rate = 0.1)
qgamma(0.5, shape = 0.01, rate = 0.01)
abline(v = 0, col ="gray")
require(invgamma)
my.invgamma <- function(x) dinvgamma(x, shape = 0.1, rate = 0.1)
my.invgamma2 <- function(x) dinvgamma(x, shape = 0.01, rate = 0.01)
curve(my.invgamma, from = 0, to = 10, xlab = expression(sigma^2), ylab = expression(pi(sigma^2)))
curve(my.invgamma2, from = 0, to = 10, add = T, col = "blue")
abline(h = 0, col ="gray")
abline(v = 0, col ="gray")
qinvgamma(0.5, shape = 0.1, rate = 0.1)
ttt <- rgamma(1e3, shape = 0.01, rate = 0.01)
head(ttt)
median(ttt)
mean(ttt)
head(ttt, n = 20)
draw.gamma <- function(shape, rate, ...){
my.pdf <- function(x) dgamma(x, shape = shape, rate = rate)
curve(my.gamma, ...)
}
draw.gamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.gamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.gamma(shape = 10, rate = 10, from = 0, to = 10, add = T, col = "blue")
draw.gamma(shape = 100, rate = 100, from = 0, to = 10, add = T, col = "red")
draw.gamma <- function(shape, rate, ...){
my.pdf <- function(x) dgamma(x, shape = shape, rate = rate)
curve(my.gamma, ...)
}
draw.gamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.gamma(shape = 10, rate = 10, from = 0, to = 10, add = T, col = "blue")
draw.gamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.gamma(shape = 10, rate = 10, from = 0, to = 10, add = T, col = "blue")
draw.gamma(shape = 100, rate = 100, from = 0, to = 10, add = T, col = "red")
draw.gamma <- function(shape, rate, ...){
my.pdf <- function(x) dgamma(x, shape = shape, rate = rate)
curve(my.pdf, ...)
}
draw.gamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.gamma(shape = 10, rate = 10, from = 0, to = 10, add = T, col = "blue")
draw.gamma(shape = 100, rate = 100, from = 0, to = 10, add = T, col = "red")
draw.gamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.gamma(shape = 0.1, rate = 0.1, from = 0, to = 10, add = T, col = "blue")
draw.gamma(shape = 0.01, rate = 0.01, from = 0, to = 10, add = T, col = "red")
abline(h = 0, col ="gray")
abline(v = 0, col ="gray")
draw.igamma <- function(shape, rate, ...){
my.pdf <- function(x) dinvgamma(x, shape = shape, rate = rate)
curve(my.pdf, ...)
}
my.invgamma <- function(x) dinvgamma(x, shape = 0.1, rate = 0.1)
my.invgamma2 <- function(x) dinvgamma(x, shape = 0.01, rate = 0.01)
draw.igamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.igamma <- function(shape, rate, ...){
my.pdf <- function(x) dinvgamma(x, shape = shape, rate = rate)
curve(my.pdf, ...)
}
draw.igamma(shape = 1, rate = 1, from = 0, to = 10, xlab = expression(tau^2), ylab = expression(pi(tau^2)))
draw.igamma(shape = 0.1, rate = 0.1, from = 0, to = 10, add = T, col = "blue")
draw.igamma(shape = 0.01, rate = 0.01, from = 0, to = 10, add = T, col = "red")
abline(h = 0, col ="gray")
abline(v = 0, col ="gray")
require(R2jags)
moth <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.1, 0.1)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "L[1]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
print(jagsfit)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
(post.mean   <- apply(mcmc.output, 2, mean))
HPDinterval(as.mcmc(mcmc.output['b.diff']))
require(R2jags)
moth <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-12)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-12)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-12)       # prior for slope
b[2] ~ dnorm (0.0, 1E-12)       # prior for slope
tau_L   ~ dgamma (0.1, 0.1)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "L[1]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
print(jagsfit)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
(post.mean   <- apply(mcmc.output, 2, mean))
HPDinterval(as.mcmc(mcmc.output['b.diff']))
require(rstanarm)
moth <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
fm1 <- stan_glmer(cbind(removed, placed - removed) ~ distance * morph + (1 | location),
family = binomial(link = "logit"),
data = moth)
print(fm1, digits = 5)
post.predict <- posterior_predict(fm1)
par(mfrow = c(2, 2))
with(moth, plot(removed / placed ~ distance, type = "n"))
with(subset(moth, morph == "dark"), points(removed / placed ~ distance, pch = 16))
with(subset(moth, morph == "light"), points(removed / placed ~ distance, pch = 1))
moth.pp <- moth
for (i in 1:3) {
moth.pp$removed <- post.predict[i, ]
with(moth.pp, plot(removed / placed ~ distance, type = "n"))
with(subset(moth.pp, morph == "dark"), points(removed / placed ~ distance, pch = 16))
with(subset(moth.pp, morph == "light"), points(removed / placed ~ distance, pch = 1))
}
for (i in 1:4) {
hist(post.predict[, i])
abline(v = moth$removed[i], col = "red")
}
for (i in 1:4) {
hist(post.predict[, i], main = "")
abline(v = moth$removed[i], col = "red")
}
rm(list = ls())
horse <- read.csv("C:/Users/krgross/Documents/Teaching/bma590/general/data/horse.csv", head = T, stringsAsFactors = T)
horse$yr.ctr <- horse$year - mean(horse$year)
horse$index <- 1:nrow(horse)
require(lme4)
fm0 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps) + (1 | index),
family = "poisson",
data = horse)
summary(fm0)
fm1 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps),
family = "poisson",
data = horse)
summary(fm1)
plot(unique(horse$year), ranef(fm1)$year[[1]])
abline(h = 0, lty = "dashed")
yr.avg <- with(horse, tapply(deaths, as.factor(year), FUN = mean))
plot(yr.avg)
plot(yr.avg - mean(yr.avg), ranef(fm1)$year[[1]])
abline(a = 0, b = 1)
pp <- profile(fm1)
confint(pp)
lattice::xyplot(pp, absVal = TRUE)
lattice::splom(pp)
rm(list = ls())
exp(c(-0.71444,-0.19644))
summary(fm1)
horse <- read.csv("C:/Users/krgross/Documents/Teaching/bma590/general/data/horse.csv", head = T, stringsAsFactors = T)
horse$yr.ctr <- horse$year - mean(horse$year)
horse$index <- 1:nrow(horse)
require(lme4)
fm0 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps) + (1 | index),
family = "poisson",
data = horse)
summary(fm0)
fm1 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps),
family = "poisson",
data = horse)
summary(fm1)
exp(-0.4359)
fm1 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps),
family = "poisson",
link = "identity",
data = horse)
?glmer
fm0 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps) + (1 | index),
family = poisson,
data = horse)
summary(fm0)
fm1 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps),
family = poisson(link = "identity"),
data = horse)
fm1 <- glmer(deaths ~ 1 + (1 | year) + (1 | corps),
family = poisson,
data = horse)
summary(fm1)
exp(-0.4359)
pp <- profile(fm1)
confint(pp)
lattice::xyplot(pp, absVal = TRUE)
plot(unique(horse$year), ranef(fm1)$year[[1]])
abline(h = 0, lty = "dashed")
yr.avg <- with(horse, tapply(deaths, as.factor(year), FUN = mean))
plot(yr.avg)
plot(yr.avg - mean(yr.avg), ranef(fm1)$year[[1]])
abline(a = 0, b = 1)
rm(list = ls())
rm(list = ls())
require(mgcv)
coral <- read.csv("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/coral.csv", head = TRUE, stringsAsFactors = TRUE)
head(coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
fm1 <- gam(mortality ~ s(ln_area, k = 20),
family = binomial(link = "logit"),
data = coral)
summary(fm1)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
x.vals <- with(coral, seq(from = min(ln_area), to = max(ln_area), length = 100))
fm1.fit <- predict(fm1, newdata = data.frame(ln_area = x.vals), se = TRUE)
inv.logit <- function(x) exp(x) / (1 + exp(x))
lines(x.vals, inv.logit(fm1.fit$fit))
lines(x.vals, inv.logit(fm1.fit$fit + 1.96 * fm1.fit$se.fit), lty = "dashed")
lines(x.vals, inv.logit(fm1.fit$fit - 1.96 * fm1.fit$se.fit), lty = "dashed")
fm2 <- gam(mortality ~ s(ln_area, k = 20),
family = binomial(link = "cloglog"),
data = coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
fm2.fit <- predict(fm2, newdata = data.frame(ln_area = x.vals), se = TRUE)
lines(x.vals, inv.logit(fm2.fit$fit), col = "red")
lines(x.vals, inv.logit(fm2.fit$fit + 1.96 * fm2.fit$se.fit), col = "red", lty = "dashed")
lines(x.vals, inv.logit(fm2.fit$fit - 1.96 * fm2.fit$se.fit), col = "red", lty = "dashed")
AIC(fm1, fm2)
rm(list = ls())
require(mgcv)
coral <- read.csv("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/coral.csv", head = TRUE, stringsAsFactors = TRUE)
head(coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
fm1 <- gam(mortality ~ s(ln_area, k = 20),
family = binomial(link = "logit"),
data = coral)
summary(fm1)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
x.vals <- with(coral, seq(from = min(ln_area), to = max(ln_area), length = 100))
fm1.fit <- predict(fm1, newdata = data.frame(ln_area = x.vals), se = TRUE)
inv.logit <- function(x) exp(x) / (1 + exp(x))
lines(x.vals, inv.logit(fm1.fit$fit))
lines(x.vals, inv.logit(fm1.fit$fit + 1.96 * fm1.fit$se.fit), lty = "dashed")
lines(x.vals, inv.logit(fm1.fit$fit - 1.96 * fm1.fit$se.fit), lty = "dashed")
fm2 <- gam(mortality ~ s(ln_area, k = 20),
family = binomial(link = "cloglog"),
data = coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
fm2.fit <- predict(fm2, newdata = data.frame(ln_area = x.vals), se = TRUE)
lines(x.vals, inv.logit(fm2.fit$fit), col = "red")
lines(x.vals, inv.logit(fm2.fit$fit + 1.96 * fm2.fit$se.fit), col = "red", lty = "dashed")
lines(x.vals, inv.logit(fm2.fit$fit - 1.96 * fm2.fit$se.fit), col = "red", lty = "dashed")
rdu <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/rdu-temperature.txt", head = T)
# remove NA's, coded as -99
with(rdu, table(temp == -99))
rdu <- subset(rdu, temp > -99)
with(rdu, plot(temp ~ time, type = "l", xlab = "day"))
taii(rdi)
taii(rdu)
tail(rdu)
require(mgcv)
fm1 <- gamm(temp ~ s(doy, bs = "cc", k = 20) + s(time),
data = rdu,
correlation = corAR1(form = ~ 1 | yr))
summary(fm1$lme)
summary(fm1$gam)
fm1 <- gamm(temp ~ s(doy, bs = "cc", k = 30) + s(time),
data = rdu,
correlation = corAR1(form = ~ 1 | yr))
summary(fm1$lme)
summary(fm1$gam)
plot(fm1$gam)
data = rdu,
fm2 <- gamm(temp ~ s(doy, bs = "cc", k = 30) + time,
data = rdu,
correlation = corAR1(form = ~ 1 | yr))
fm1 <- gamm(temp ~ s(doy, bs = "cc", k = 30) + s(time, k = 20),
data = rdu,
correlation = corAR1(form = ~ 1 | yr))
fm1 <- gamm(temp ~ s(doy, bs = "cc", k = 30) + s(time, k = 10),
data = rdu,
correlation = corAR1(form = ~ 1 | yr))
summary(fm1$lme)
summary(fm1$gam)
plot(fm1$gam)
data = rdu,
fm2 <- gamm(temp ~ s(doy, bs = "cc", k = 30) + time,
data = rdu,
correlation = corAR1(form = ~ 1 | yr))
summary(fm2$gam)
coefficients(fm2$gam)['time'] * 365.25
fm1a <- gam(temp ~ s(doy, bs = "cc", k = 20) + s(time),
data = rdu)
plot(fm1a)
summary(fm1$lme)
rm(list = ls())
tick <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/tick.txt", head = T)
names(tick) <- c("index", "ticks", "brood", "elevation", "yr", "loc")
tick$index <- as.factor(tick$index)
tick$brood <- as.factor(tick$brood)
tick$yr    <- as.factor(tick$yr)
tick$loc   <- as.factor(tick$loc)
tick$elev.z <- with(tick, (elevation - mean(elevation)) / sd(elevation))
require(gamm4)
fm4  <- gamm4(ticks ~ yr + s(elev.z),
random = ~ (1 | loc) + (1 | brood) + (1 | index),
family = "poisson",
data = tick)
summary(fm4$mer)
summary(fm4$gam)
plot(fm4$gam)
fm1  <- glmer(ticks ~ yr + elev.z + (1 | loc) + (1 | brood) + (1 | index),
family = "poisson",
data = tick)
summary(fm1)
abline(a = 0, b = -0.8543, col = "red")
par(mfrow = c(1, 3))
plot.subset <- function(year, a, b) {
with(tick, plot(log(ticks + 1) ~ elev.z, type = "n", main = year))
with(subset(tick, yr == year), points(jitter(log(ticks + 1)) ~ elev.z))
fit <- function(x) log(1 + exp(a + b * x))
curve(fit, from = min(tick$elev.z), to = max(tick$elev.z), add = TRUE, col = "red")
}
plot.subset("95", a = 0.3728, b = -0.8543)
plot.subset("96", a = 0.3728 + 1.1804, b = -0.8543)
plot.subset("97", a = 0.3728 - 0.9787, b = -0.8543)
fm5  <- gam(ticks ~ yr + s(elev.z),
family = "poisson",
data = tick)
plot(fm5)
fm4  <- gamm4(ticks ~ yr + s(elev.z),
random = ~ (1 | loc) + (1 | brood) + (1 | index),
family = "poisson",
data = tick)
summary(fm4$mer)
summary(fm4$gam)
fm1  <- glmer(ticks ~ yr + elev.z + (1 | loc) + (1 | brood) + (1 | index),
family = "poisson",
data = tick)
summary(fm1)
rdu <- read.table("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/rdu-temperature.txt", head = T)
rm(list = ls())
require(mgcv)
coral <- read.csv("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/coral.csv", head = TRUE, stringsAsFactors = TRUE)
head(coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area, xlab = "log area", ylab = "mortality"))
fm1 <- gam(mortality ~ s(ln_area, k = 20),
family = binomial(link = "logit"),
data = coral)
summary(fm1)
x.vals <- with(coral, seq(from = min(ln_area), to = max(ln_area), length = 100))
fm1.fit <- predict(fm1, newdata = data.frame(ln_area = x.vals), se = TRUE)
plot(x.vals, fm1.fit, type = "l", xlab = "log size, x", ylab = "s(x)")
plot(x.vals, fm1.fit$fit, type = "l", xlab = "log size, x", ylab = "s(x)")
plot(x.vals, fm1.fit$fit, type = "l", xlab = "log size, x", ylab = "log odds of mortality, s(x)")
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::preview_chapter("07-GeneralizedLinearModels.Rmd", "bookdown::gitbook")
install.packages("bookdown")
bookdown::preview_chapter("07-GeneralizedLinearModels.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("index.Rmd", bookdown::gitbook)
getwd()
getwd()
bookdown::preview_chapter("07-GeneralizedLinearModels.Rmd", "bookdown::gitbook")
unlink("07-GeneralizedLinearModels_cache", recursive = TRUE)
bookdown::preview_chapter("07-GeneralizedLinearModels.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("07-GeneralizedLinearModels.Rmd", "bookdown::gitbook")
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
horse <- read.table("data/horse.txt", head = T)
fm1 <- glm(deaths ~ 1,
family = poisson(link = "identity"),
data = horse)
summary(fm1)
elephant <- read.table("data/elephant.txt", head = T)
head(elephant)
with(elephant, plot(matings ~ age))
fm1 <- glm(matings ~ age,
family = poisson(link = "log"),
data   = elephant)  # log link is the default
summary(fm1)
new.data <- data.frame(age = seq(from = min(elephant$age),
to   = max(elephant$age),
length = 100))
predict.fm1 <- predict(fm1, newdata = new.data, type = "response", se.fit = TRUE)
with(elephant, plot(matings ~ age))
lines(x = new.data$age, y = predict.fm1$fit, col = "red")
# add lines for standard errors
lines(x   = new.data$age,
y   = predict.fm1$fit - 1.96 * predict.fm1$se.fit,
col = "red",
lty = "dashed")
lines(x   = new.data$age,
y   = predict.fm1$fit + 1.96 * predict.fm1$se.fit,
col = "red",
lty = "dashed")
bookdown::preview_chapter("07-GeneralizedLinearModels.Rmd", "bookdown::gitbook")
