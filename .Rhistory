mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2, las = 0)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 4), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
with(subset(cod, Year == i & Area == j),
plot(log(Intensity + 1) ~ Length, xlim = range(cod$Length), ylim = log(range(cod$Intensity) + 1),
xlab = "", ylab = "", yaxt = "n"))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
}
mtext(i, side = 4, line  = 2)
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2, las = 0)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 4), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
with(subset(cod, Year == i & Area == j),
plot(log(Intensity + 1) ~ Length, xlim = range(cod$Length), ylim = log(range(cod$Intensity) + 1),
xlab = "", ylab = "", yaxt = "n"))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
}
mtext(i, side = 4, line  = 1)
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2, las = 0)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 7, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
with(subset(cod, Year == i & Area == j),
plot(log(Intensity + 1) ~ Length, xlim = range(cod$Length), ylim = log(range(cod$Intensity) + 1),
xlab = "", ylab = "", yaxt = "n"))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
}
mtext(i, side = 1 line  = 1)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 7, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
with(subset(cod, Year == i & Area == j),
plot(log(Intensity + 1) ~ Length, xlim = range(cod$Length), ylim = log(range(cod$Intensity) + 1),
xlab = "", ylab = "", yaxt = "n"))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
}
mtext(i, side = 2, line  = 1)
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 5, las = 0)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 7, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
with(subset(cod, Year == i & Area == j),
plot(log(Intensity + 1) ~ Length, xlim = range(cod$Length), ylim = log(range(cod$Intensity) + 1),
xlab = "", ylab = "", yaxt = "n"))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
if (j == 1) mtext(i, side = 2, line  = 1)
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 5, las = 0)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 7, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
with(subset(cod, Year == i & Area == j),
plot(log(Intensity + 1) ~ Length, xlim = range(cod$Length), ylim = log(range(cod$Intensity) + 1),
xlab = "", ylab = "", yaxt = "n"))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
if (j == 1) mtext(i, side = 2, line  = 3)
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 5, las = 0)
formula.2 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area) | Length
+ as.factor(Year) + as.factor(Area))
cod.nb.fm2 <- zeroinfl(formula.2, data  = cod, dist = "negbin")
require(pscl)
formula.2 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area) | Length
+ as.factor(Year) + as.factor(Area))
cod.nb.fm2 <- zeroinfl(formula.2, data  = cod, dist = "negbin")
summary(cod.nb.fm2)
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 7, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = log(range(cod$Intensity) + 1), xlab = "", ylab = "", type = "n", yaxt = "n")
lines(log(predicted.vals + 1) ~ length.vals)
with(subset(cod, Year == i & Area == j), points(log(Intensity + 1) ~ Length))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
if (j == 1) mtext(i, side = 2, line  = 3)
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2, las = 0)
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 7, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = log(range(cod$Intensity) + 1), xlab = "", ylab = "", type = "n", yaxt = "n")
lines(log(predicted.vals + 1) ~ length.vals)
with(subset(cod, Year == i & Area == j), points(log(Intensity + 1) ~ Length))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
if (j == 1) mtext(i, side = 2, line  = 3)
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 6, las = 0)
moth2 <- read.table("data/moth2.txt", head = TRUE, stringsAsFactors = TRUE)
head(moth2, n = 3)
elogit <- function(x) log(x / (1 - x))
moth2$elogit.diff <- with(moth2, elogit(d.removed / d.placed) - elogit(l.removed / l.placed))
fm1 <- lm(elogit.diff ~ distance, data = moth2)
with(moth2, plot(elogit.diff ~ distance,
xlab = "distance from city center (km)",
ylab = "difference in log odds of removal, dark - light"))
abline(h = 0, lty = "dashed")
abline(fm1)
summary(fm1)
confint(fm1)
moth <- read.table("data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
contrasts(moth$morph) <- contr.treatment(n = 2, base = 2)
fm2 <- geeglm(cbind(removed, placed - removed) ~ distance * morph,
family = binomial(link = "logit"),
data   = moth,
id     = location,
corstr = "exchangeable")
require(geepack)
moth <- read.table("data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
contrasts(moth$morph) <- contr.treatment(n = 2, base = 2)
fm2 <- geeglm(cbind(removed, placed - removed) ~ distance * morph,
family = binomial(link = "logit"),
data   = moth,
id     = location,
corstr = "exchangeable")
summary(fm2)
inv.logit <- function(x) exp(x) / (1 + exp(x))
light.fit <- function(d) inv.logit(-0.71472 - 0.00938 * d)
dark.fit <- function(d) inv.logit(-0.71472 - 0.41024 + (-0.00938 + 0.02776) * d)
curve(dark.fit, from = min(moth$distance), to = max(moth$distance),
xlab = "distance from city center (km)",
ylab = "proportion removed",
ylim = c(0.15, 0.5))
curve(light.fit, from = min(moth$distance), to = max(moth$distance),
xlab = "distance from city center (km)",
ylab = "proportion removed",
add = TRUE,
lty = "dashed")
with(subset(moth, morph == "dark"), points(removed / placed ~ distance, pch = 16))
with(subset(moth, morph == "light"), points(removed / placed ~ distance, pch = 1))
dark.fit(20)
options(digits = 7)
dark.fit(20)
dark.fit(20)
require(lme4)
fm3 <- glmer(cbind(removed, placed - removed) ~ distance * morph + (1 | location),
family = binomial(link = "logit"),
data = moth)
summary(fm3)
dark.fit.glmm <- function(d) inv.logit(-0.71979 - 0.41113 + (-0.00934 + 0.02782) * d)
dark.fit.glmm(20)
linear.predict.sample <- rnorm(1e5, mean = dark.fit.glmm(20), sd = 0.1072)
data.mean.sample <- inv.logit(linear.predict.sample)
mean(data.mean.sample)
dark.linear.predictor.glmm <- function(d) -0.71979 - 0.41113 + (-0.00934 + 0.02782) * d
dark.fit.glmm <- function(d) inv.logit(dark.linear.predictor.glmm(d))
dark.fit.glmm(20)
dark.linear.predictor.glmm <- function(d) -0.71979 - 0.41113 + (-0.00934 + 0.02782) * d
dark.fit.glmm <- function(d) inv.logit(dark.linear.predictor.glmm(d))
dark.fit.glmm(20)
linear.predict.sample <- rnorm(1e5, mean = dark.fit.glmm(20), sd = 0.1072)
data.mean.sample <- inv.logit(linear.predict.sample)
mean(data.mean.sample)
linear.predict.sample <- rnorm(1e5, mean = dark.linpred.glmm(20), sd = 0.1072)
dark.linpred.glmm <- function(d) -0.71979 - 0.41113 + (-0.00934 + 0.02782) * d
dark.fit.glmm <- function(d) inv.logit(dark.linpred.glmm(d))
dark.fit.glmm(20)
linear.predict.sample <- rnorm(1e5, mean = dark.linpred.glmm(20), sd = 0.1072)
data.mean.sample <- inv.logit(linear.predict.sample)
mean(data.mean.sample)
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor")
hist(prob.sample, breaks = 50, xlab = "removal probability")
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor")
hist(prob.sample, breaks = 50, xlab = "removal probability")
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 5 * 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor")
hist(prob.sample, breaks = 50, xlab = "removal probability")
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = condiitonal.mean, col = ""red"darkorange")
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = condiitonal.mean, col = "darkorange")
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = conditional.mean, col = "darkorange")
abline(v = marginal.mean, col = "cyan")
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = conditional.mean, col = "darkorange", lwd =2)
abline(v = marginal.mean, col = "cyan", lwd = 2)
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = conditional.mean, col = "darkorange", lwd =2)
abline(v = marginal.mean, col = "blue", lwd = 2)
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 5 * 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = conditional.mean, col = "darkorange", lwd =2)
abline(v = marginal.mean, col = "blue", lwd = 2)
linpred.sample <- rnorm(1e6, mean = dark.linpred.glmm(20), sd = 10 * 0.1072)
prob.sample <- inv.logit(linpred.sample)
(conditional.mean <- inv.logit(dark.linpred.glmm(20)))
(marginal.mean <- mean(prob.sample))
par(mfrow = c(1, 2))
hist(linpred.sample, breaks = 50, xlab = "linear predictor", main = "")
hist(prob.sample, breaks = 50, xlab = "removal probability", main = "")
abline(v = conditional.mean, col = "darkorange", lwd =2)
abline(v = marginal.mean, col = "blue", lwd = 2)
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.01, 0.01)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
require(R2jags)
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.01, 0.01)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
print(jagsfit)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
post.mean   <- apply(mcmc.output, 2, mean)
subset.samples <- sample(nrow(mcmc.output), size = 100)
moth$prop.removed <- with(moth, removed / placed)
light <- subset(moth, morph == "light")
dark  <- subset(moth, morph == "dark")
par(mfrow = c(1, 2))
#------ light morph
plot(prop.removed ~ distance,
data = moth,
type = "n",
main = "Light morph",
ylab = "proprotion removed")
points(x = light$distance, y = light$prop.removed, pch = 16)
for(i in subset.samples) {
a <- mcmc.output$a.2[i]
b <- mcmc.output$b.2[i]
fitted.curve <- function(x) inv.logit(a + b * x)
curve(fitted.curve,
from = min(moth$distance),
to   = max(moth$distance),
add  = TRUE,
col  = "deepskyblue")
}
fitted.mean.curve <- function(x) inv.logit(post.mean['a.2'] + post.mean['b.2'] * x)
curve(fitted.mean.curve,
from = min(moth$distance),
to   = max(moth$distance),
add  = TRUE,
col  = "darkblue",
lwd  = 2)
points(x = light$distance, y = light$prop.removed, pch = 16)
#--------- dark morph
plot(prop.removed ~ distance,
data = moth,
type = "n",
main = "Dark morph",
ylab = "proprotion removed")
for(i in subset.samples) {
a <- mcmc.output$a.1[i]
b <- mcmc.output$b.1[i]
fitted.curve <- function(x) inv.logit(a + b * x)
curve(fitted.curve,
from = min(moth$distance),
to   = max(moth$distance),
add  = TRUE,
col  = "deepskyblue")
}
fitted.mean.curve <- function(x) inv.logit(post.mean['a.1'] + post.mean['b.1'] * x)
curve(fitted.mean.curve,
from = min(moth$distance),
to   = max(moth$distance),
add  = TRUE,
col  = "darkblue",
lwd  = 2)
points(x = dark$distance, y = dark$prop.removed, pch = 16)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
bayesplot::mcmc_areas(mcmc.output,
pars = c("b.diff"),
prob = 0.95)
table(mcmc.output$b.diff > 0)
print(jagsfit)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
(post.mean   <- apply(mcmc.output, 2, mean))
HPDinterval(mcmc.output)
?HPDinterval
HPDinterval(as.mcmc(mcmc.output))
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
(post.mean   <- apply(mcmc.output, 2, mean))
HPDinterval(as.mcmc(mcmc.output['b.diff']))
confint(fm3)
?confint.glmer
?confint
confint(fm3, parm = c(distance:morph1))
confint(fm3, parm = c("distance:morph1"))
getwd()
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
View(moth2)
pp <- profile(fm3, parm = c("distance:morph1"))
?profile
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
golf <- read.table("data/golf.txt", head = T)
fm1 <- lmerTest::lmer(score ~ 1 + (1 | player) + (1 | round), data = golf)
summary(fm1)  # comparison of the std devs of the random effects is interesting
player.modes <- ranef(fm1)$player
head(player.modes)
(round.modes <- ranef(fm1)$round)
pp.golf <- profile(fm1)
confint(pp.golf)
xyplot(pp.golf, absVal = TRUE)
pp.golf <- profile(fm1)
confint(pp.golf)
lattice::xyplot(pp.golf, absVal = TRUE)
rm(list = ls())
require(lme4)
require(lattice)
tick <- read.table("data/tick.txt", head = T)
names(tick) <- c("index", "ticks", "brood", "elevation", "yr", "loc")
tick$index <- as.factor(tick$index)
tick$brood <- as.factor(tick$brood)
tick$yr    <- as.factor(tick$yr)
tick$loc   <- as.factor(tick$loc)
# center and scale elevation
tick$elev.z <- with(tick, (elevation - mean(elevation)) / sd(elevation))
# GLMM with Poisson response
fm1  <- glmer(ticks ~ yr + elev.z + (1 | loc / brood / index),
family = "poisson",
data = tick)
summary(fm1)
pp <- profile(fm1)
confint(pp)
xyplot(pp, absVal = TRUE)
d.resid <- residuals(fm1, type = "deviance")
(residual.deviance <- sum(d.resid^2))
df.residual(fm1)
# residual diagnostics
plot(fitted(fm1), d.resid)
abline(h = 0, lty = "dashed")
plot(tick$elev.z, d.resid)
abline(h = 0, lty = "dashed")
# model without observation-level random effect
fm2  <- glmer(ticks ~ yr + elev.z + (1 | loc / brood),
family = "poisson",
data = tick)
anova(fm1, fm2)
d.resid.2 <- residuals(fm2, type = "deviance")
sum(d.resid.2^2)
df.residual(fm2)
# Interaction between year and elevation
fm3  <- glmer(ticks ~ yr * elev.z + (1 | loc / brood / index),
family = "poisson",
data = tick)
anova(fm1, fm3)  # can use LRT because models are nested, and both have been fit with ML
exp(-6.295200067
)
require(mgcv)
coral <- read.csv("data/coral.csv", head = TRUE, stringsAsFactors = TRUE)
head(coral)
exp(-6.295200067)
require(mgcv)
coral <- read.csv("data/coral.csv", head = TRUE, stringsAsFactors = TRUE)
head(coral)
require(mgcv)
coral <- read.csv("data/coral.csv", head = TRUE, stringsAsFactors = TRUE)
head(coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area))
?gam::s
?gam
fm1 <- gam(mortality ~ s(ln_area), family = binomial(link = "logit"), data = coral)
summary(fm1)
plot(fm1)
# plot data with fit overlaid
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area))
x.vals <- with(coral, seq(from = min(ln_area_cm2), to = max(ln_area_cm2), length = 100))
fm1 <- gam(mortality ~ s(ln_area), family = binomial(link = "logit"), data = coral)
summary(fm1)
plot(fm1)
# plot data with fit overlaid
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area))
x.vals <- with(coral, seq(from = min(ln_area), to = max(ln_area), length = 100))
fm1.fit <- predict(fm1, newdata = data.frame(ln_area = x.vals), se = TRUE)
inv.logit <- function(x) exp(x) / (1 + exp(x))
lines(x.vals, inv.logit(fm1.fit$fit))
lines(x.vals, inv.logit(fm1.fit$fit + 1.96 * fm1.fit$se.fit), lty = "dashed")
lines(x.vals, inv.logit(fm1.fit$fit - 1.96 * fm1.fit$se.fit), lty = "dashed")
fm2 <- gam(mortality ~ s(ln_area), family = binomial(link = "cloglog"), data = coral)
with(coral, plot(jitter(mortality, amount = 0.02) ~ ln_area))
fm2.fit <- predict(fm2, newdata = data.frame(ln_area = x.vals), se = TRUE)
lines(x.vals, inv.logit(fm2.fit$fit), col = "red")
lines(x.vals, inv.logit(fm2.fit$fit + 1.96 * fm2.fit$se.fit), col = "red", lty = "dashed")
lines(x.vals, inv.logit(fm2.fit$fit - 1.96 * fm2.fit$se.fit), col = "red", lty = "dashed")
AIC(fm1, fm2)
