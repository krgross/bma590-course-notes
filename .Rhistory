for(i in 1:6) plot(st16$depth, mm[, i])
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 12, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
summary(st16.rspline)
st16.spline <- mgcv::gam(sources ~ s(depth, k = 25), data = st16)
plot(st16.spline, se = TRUE)  # note that the plot does not include the intercept
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.spline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
summary(st16.spline)
rm(list = ls())
require(mgcv)
bird <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/Loyn.txt", head = T)
summary(bird)
bird <- bird[, -1]
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
pairs(bird)
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/Loyn.txt", head = T)
summary(bird)
bird <- bird[, -1]
pairs(bird)
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + s(GRAZE) + s(ALT),
data = bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT),
data = bird)
summary(bird.am1)
plot(bird.am1)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.am2)
plot(bird.am2)
bird$fGRAZE <- as.factor(bird$GRAZE)
head(bird)
summary(bird)
bird.am3 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
summary(bird.am3)
AIC(bird.am2)
AIC(bird.am3)
bird.am4 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am4$residuals)
abline(h = 0, lty = "dashed")
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
contrasts(bird$fGRAZE)
head(model.matrix(bird.am5))
head(model.matrix(bird.am6))
bird.am7 <- gam(ABUND ~ s(L.AREA) + fGRAZE - 1, data = bird)
summary(bird.am7)
?mgcv::gam
?mgcv
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st16 <- subset(isit, Station == 16)
st16 <- st16[, c("SampleDepth", "Sources")]
names(st16) <- c("depth", "sources")
with(st16, plot(sources ~ depth))
with(st16, plot(log(sources) ~ depth))  ## oh dear
with(st16, plot(log(sources) ~ depth))  ## oh dear
?mgcv
?mgcv::gam
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 5, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 13, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 23, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 23, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 13, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
summary(st16.rspline)
st16.spline <- mgcv::gam(sources ~ s(depth, fx = FALSE, k = 25), data = st16)
plot(st16.spline, se = TRUE)  # note that the plot does not include the intercept
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.spline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
summary(st16.spline)
(
(
(
(
(
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st16 <- subset(isit, Station == 16)
st16 <- st16[, c("SampleDepth", "Sources")]
names(st16) <- c("depth", "sources")
with(st16, plot(sources ~ depth))
with(st16, plot(log(sources) ~ depth))  ## oh dear
st16_knots <- quantile(st16$depth, c(1/3, 2/3))
st16$basis3 <- pmax(0, st16$depth - st16_knots[1])
st16$basis4 <- pmax(0, st16$depth - st16_knots[2])
head(st16)
tail(st16)
linear_spline <- with(st16, lm(sources ~ depth + basis3 + basis4))
?mgcv::gam
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 13, fx = TRUE, bs = "cr"),
data = st16)
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 3, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
summary(st16.rspline)
mm <- model.matrix(st16.rspline)
par(mfrow = c(2,3))
for(i in 1:6) plot(st16$depth, mm[, i])
i
summary(st16.rspline)
head(mm)
st16.rspline <- mgcv::gam(sources ~ s(depth, k = 6, fx = TRUE, bs = "cr"),
data = st16)
plot(st16.rspline, se = TRUE)
with(st16, plot(sources ~ depth))
depth.vals <- with(st16, seq(from   = min(depth),
to     = max(depth),
length = 100))
st16.fit <- predict(st16.rspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
summary(st16.rspline)
mm <- model.matrix(st16.rspline)
par(mfrow = c(2,3))
for(i in 1:6) plot(st16$depth, mm[, i])
?gam
library(splines)
?bs
?smooth.spline
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st19 <- subset(isit, Station == 19)
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(sources ~ depth))
with(st19, plot(log(sources) ~ depth))
## download the data from the book's website
isit <- read.table("data/ISIT.txt", head = T)
## extract the data from station 16
st19 <- subset(isit, Station == 16)
## retain just the variables that we want, and rename
st19 <- st16[, c("SampleDepth", "Sources")]
## download the data from the book's website
isit <- read.table("data/ISIT.txt", head = T)
## extract the data from station 16
st19 <- subset(isit, Station == 16)
## retain just the variables that we want, and rename
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(sources ~ depth))
## download the data from the book's website
isit <- read.table("data/ISIT.txt", head = T)
## extract the data from station 19
st19 <- subset(isit, Station == 19)
## retain just the variables that we want, and rename
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(sources ~ depth))
with(st19, plot(log(sources) ~ depth))
?loess
st19.lo <- loess(log(sources) ~ depth, data = st19)
summary(st19.lo)
depth.vals <- with(st19, seq(from   = min(depth),
to     = max(depth),
length = 100))
st19.fit <- predict(object  = st19.lo,
newdata = depth.vals,
se      = TRUE)
with(st19, plot(log(sources) ~ depth))
lines(x = depth.vals, y = st19.fit$fit, col = "blue")
# add 95% error bars
lines(x   = depth.vals,
y   = st19.fit$fit + st19.fit$se.fit * qt(p = .975, df = st19.fit$df),
col = "blue",
lty = "dashed")
lines(x   = depth.vals,
y   = st19.fit$fit - st19.fit$se.fit * qt(p = .975, df = st19.fit$df),
col = "blue",
lty = "dashed")
plot(st19.lo$residuals ~ st19$depth)
abline(h = 0, lty = "dotted")
PlotLoessFit <- function(x, y, return.fit = FALSE, ...){
# Caluclates a loess fit with the 'loess' function, and makes a plot
#
# Args:
#   x: predictor
#   y: response
#   return.fit: logical
#   ...: Optional arguments to loess
#
# Returns:
#   the loess fit
my.lo <- loess(y ~ x, ...)
x.vals <- seq(from = min(x), to = max(x), length = 100)
my.fit <- predict(object  = my.lo,
newdata = x.vals,
se      = TRUE)
plot(x, y)
lines(x = x.vals, y = my.fit$fit, col = "blue")
lines(x   = x.vals,
y   = my.fit$fit + my.fit$se.fit * qt(p = .975, df = my.fit$df),
col = "blue",
lty = "dashed")
lines(x   = x.vals,
y   = my.fit$fit - my.fit$se.fit * qt(p = .975, df = my.fit$df),
col = "blue",
lty = "dashed")
if (return.fit) {
return(my.lo)
}
}
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.5)
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.25)
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.1)
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.6)
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.4)
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.2)
PlotLoessFit(x = st19$depth, y = st19$sources, span = 0.4, degree = 1)
PlotLoessFit(x = st19$depth, y = log(st19$sources), span = 0.4, degree = 1)
?bs
library(splines)
st19.fit <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000)), data = st19)
# plot(st19.rspline, se = TRUE)
summary(st19.fit)
library(splines)
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000)), data = st19)
# plot using predict.lm; code from James et al (2021)
depth.vals <- seq(from = min(st19$depth), to = max(st19$dpeth), length = 100)
library(splines)
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000)), data = st19)
# plot using predict.lm; code from James et al (2021)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
fm1.pred <- predict(fm1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ dpeth))
library(splines)
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000)), data = st19)
# plot using predict.lm; code from James et al (2021)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
fm1.pred <- predict(fm1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.975, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.025, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
library(splines)
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1500), degree = 1), data = st19)
# plot using predict.lm; code adapted from James et al (2021)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
fm3 <- lm(log(sources) ~ bs(depth, df = 8), data = st19)
# plot using predict.lm; code adapted from James et al (2021)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm0 <- lm(log(sources) ~ 1, data = st19)
anova(fm0, fm3)
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
head(linear.basis)
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
par(mfrow = c(1, 2))
for (i in 1:2) plot(st19$depth, linear.basis[, i])
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
par(mfrow = c(1, 2))
for (i in 1:2) plot(st19$depth, linear.basis[, i], xlab = "depth", ylab = "basis function")
cubic.basis <- bs(st19$depth, df = 7)
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
cubic.basis <- bs(st19$depth, df = 6)
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
cubic.basis <- bs(st19$depth, df = 5)
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
summary(fm1)
summary(fm2)
cubic.basis <- bs(st19$depth, df = 6)
par(mfrow = c(2, 3))
for (i in 1:6) plot(st19$depth, cubic.basis[, i], xlab = "depth", ylab = "basis function")
?smooth.spline
fm4 <- smooth.spline(x = st19$dpeth, y = log(st19$sources), cv = TRUE)
fm4 <- smooth.spline(x = st19$depth, y = log(st19$sources), cv = TRUE)
# plot using predict.lm; code adapted from James et al (2021)
with(st19, plot(log(sources) ~ depth))
lines(fm4, lwd = 2, col = "red")
str(fm4)
summary(fm4)
fm4$df
ns
?ns
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
par(mfrow = c(1, 2))
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.975, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.025, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
par(mfrow = c(1, 2))
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.975, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm1.pred$fit + qt(0.025, df = 43) * fm1.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
fm5 <- smooth.spline(x = st19$depth, y = log(st19$sources), cv = TRUE)
# plot using predict.lm; code adapted from James et al (2021)
with(st19, plot(log(sources) ~ depth))
lines(fm5, lwd = 2, col = "red")
library(mgcv)
st19.sspline <- mgcv::gam(sources ~ s(depth), data = st19)
plot(st19.sspline, se = TRUE)
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19)
plot(st19.sspline, se = TRUE)
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth, bs = "cr"), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
summary(st19.sspline)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
AIC(st19.sspline)
getwd()
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::preview_chapter("04-SmoothRegression.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("04-SmoothRegression.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("04-SmoothRegression.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("04-SmoothRegression.Rmd", "bookdown::gitbook")
rm(list = ls())
require(mgcv)
bird <- read.table("data/Loyn.txt", head = T)
summary(bird)
# get rid of the 'Site' variable; it is redundant with the row label
bird <- bird[, -1]
# log-transform area, distance, ldistance, to remove right-skew
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
# change YR.ISOL to years since isolation (study was published in 1987)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
# keep the only the variables we want
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
summary(bird)
bird.gam1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT), data = bird)
summary(bird.gam1)
plot(bird.gam1)
bird.gam2 <- mgcv::gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.gam2)
plot(bird.gam2)
bird$fGRAZE <- as.factor(bird$GRAZE)
summary(bird)
bird.gam3 <- gam(ABUND ~ s(L.AREA, k = 10) + fGRAZE, data = bird)
plot(bird.gam3)
summary(bird.gam3)
bird.gam3 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
plot(bird.gam3)
summary(bird.gam3)
AIC(bird.gam2)
AIC(bird.gam3)
with(bird, contrasts(fGRAZE))
bird.gam4 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.gam4$residuals)
abline(h = 0, lty = "dashed")
bird.gam5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.gam6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.gam5, bird.gam6, test = "F")
bird.gam5 <- gam(ABUND ~ s(L.AREA, k = 3, fx = TRUE) + GRAZE, data = bird)
bird.gam6 <- gam(ABUND ~ s(L.AREA, k = 3, fx = TRUE) + fGRAZE, data = bird)
anova(bird.gam5, bird.gam6, test = "F")
bird.gam7 <- lm(ABUND ~ bs(L.AREA, df = 3) + GRAZE, data = bird)
bird.gam8 <- lm(ABUND ~ bs(L.AREA, df = 3) + fGRAZE, data = bird)
anova(bird.gam7, bird.gam8, test = "F")
bird.gam5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.gam6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.gam5, bird.gam6, test = "F")
bird.gam7 <- lm(ABUND ~ bs(L.AREA, df = 3) + GRAZE, data = bird)
bird.gam8 <- lm(ABUND ~ bs(L.AREA, df = 3) + fGRAZE, data = bird)
anova(bird.gam7, bird.gam8, test = "F")
bird.gam5 <- gam(ABUND ~ s(L.AREA, k = 4, bs = "cr", fx = TRUE) + GRAZE, data = bird)
bird.gam6 <- gam(ABUND ~ s(L.AREA, k = 4, bs = "cr", fx = TRUE) + fGRAZE, data = bird)
anova(bird.gam5, bird.gam6, test = "F")
bird.gam5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.gam6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.gam5, bird.gam6, test = "F")
bird.gam7 <- lm(ABUND ~ bs(L.AREA, df = 3) + GRAZE, data = bird)
bird.gam8 <- lm(ABUND ~ bs(L.AREA, df = 3) + fGRAZE, data = bird)
anova(bird.gam7, bird.gam8, test = "F")
bookdown::preview_chapter("04-SmoothRegression.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
