}
i <- 2
b0 <- mcmc.output$b0[i]
b1 <- mcmc.output$b1[i]
my.fit <- function(x) exp(b0 + b1 * x)
with(mcmc.output, curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col = "deepskyblue",
lwd = 1))
mcmc.output <- as.data.frame(jagsfit2$BUGSoutput$sims.list)
plot(matings ~ age, data = elephant, type = "n")
subset.samples <- sample(nrow(mcmc.output), size = 100)
for(i in subset.samples) {
b0 <- mcmc.output$b0[i]
b1 <- mcmc.output$b1[i]
my.fit <- function(x) exp(b0 + b1 * x)
with(mcmc.output, curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "deepskyblue",
lwd  = 1,
add  = TRUE))
}
with(elephant, points(matings ~ age))
with(elephant, points(matings ~ age, pch = 16))
coef(jagsfit2)
names(jagsfit2)
names(summary(jagsfit2))
post.means <- apply(mcmc.output, 2, mean)
post.means
for(i in subset.samples) {
b0 <- mcmc.output$b0[i]
b1 <- mcmc.output$b1[i]
with(mcmc.output, curve(function(x) exp(b0 + b1 * x),
from = min(elephant$age),
to   = max(elephant$age),
col  = "deepskyblue",
lwd  = 1,
add  = TRUE))
}
post.means$b0
my.fit <- function(x) exp(post.means['b0'] + post.means['b1'] * x)
my.fit <- function(x) exp(post.means['b0'] + post.means['b1'] * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "blue",
lwd  = 2,
add  = TRUE)
require(MASS)
fm3 <- glm.nb(matings ~ age, link = identity, data = elephant)
summary(fm3)
predict.fm3 <- predict(fm3, newdata = new.data, type = "response", se.fit = TRUE)
with(elephant, plot(matings ~ age))
lines(x = new.data$age, y = predict.fm3$fit, col = "blue")
lines(x   = new.data$age,
y   = predict.fm3$fit + 1.96 * predict.fm3$se.fit,
col = "blue",
lty = "dashed")
lines(x   = new.data$age,
y   = predict.fm3$fit - 1.96 * predict.fm3$se.fit,
col = "blue",
lty = "dashed")
require(rstanarm)
fm5 <- stan_glm(matings ~ age,
family = poisson(link = "identity"),
data   = elephant,
seed   = 1)
print(fm5, digits = 3)
require(rstanarm)
fm5 <- stan_glm(matings ~ age,
family = poisson(link = "identity"),
data   = elephant,
seed   = 1)
print(fm5, digits = 3)
prior_summary(fm5)
post.predict <- posterior_predict(fm5)
par(mfrow = c(2, 2))
for(i in 1:4) {
with(elephant, plot(matings ~ age, type = "n"))
points(elephant$age, post.predict[i, ], pch = 1)
}
pp_check(fm5, plotfun = "stat", stat = "sd", binwidth = .1)
par(mfrow = c(1, 3))
for(i in 1:3) {
with(elephant, plot(matings ~ age, type = "n"))
points(elephant$age, post.predict[i, ], pch = 1)
}
elephant <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/elephant.txt", head = T)
with(elephant, plot(matings ~ age))
fm1 <- glm(matings ~ age,
family = poisson(link = "identity"),
data = elephant)
summary(fm1)
new.data <- data.frame(age = seq(from = min(elephant$age),
to   = max(elephant$age),
length = 100))
predict.fm1 <- predict(fm1, newdata = new.data, type = "response", se.fit = TRUE)
with(elephant, plot(matings ~ age))
lines(x = new.data$age, y = predict.fm1$fit, col = "blue")
lines(x   = new.data$age,
y   = predict.fm1$fit - 1.96 * predict.fm1$se.fit,
col = "blue",
lty = "dashed")
lines(x   = new.data$age,
y   = predict.fm1$fit + 1.96 * predict.fm1$se.fit,
col = "blue",
lty = "dashed")
fm2 <- glm(matings ~ age, family = quasipoisson(link = "identity"), data = elephant)
fm2 <- glm(matings ~ age, family = quasipoisson(link = "identity"), data = elephant)
summary(fm2)
50.058 / 29
50.058 / 39
sqrt(50.058 / 39)
require(MASS)
fm3 <- glm.nb(matings ~ age, link = identity, data = elephant)
summary(fm3)
predict.fm3 <- predict(fm3, newdata = new.data, type = "response", se.fit = TRUE)
with(elephant, plot(matings ~ age))
lines(x = new.data$age, y = predict.fm3$fit, col = "blue")
lines(x   = new.data$age,
y   = predict.fm3$fit + 1.96 * predict.fm3$se.fit,
col = "blue",
lty = "dashed")
lines(x   = new.data$age,
y   = predict.fm3$fit - 1.96 * predict.fm3$se.fit,
col = "blue",
lty = "dashed")
require(rstanarm)
fm4 <- stan_glm(matings ~ age,
family = poisson(link = "identity"),
data   = elephant,
seed   = 1)
print(fm4, digits = 3)
plot(fm4)
require(bayesplot)
bayesplot::mcmc_areas(posterior.fm4,
pars = c("b1"),
prob = 0.95)
posterior.fm4 <- as.matrix(fm4)
bayesplot::mcmc_areas(posterior.fm4,
pars = c("b1"),
prob = 0.95)
bayesplot::mcmc_areas(posterior.fm4,
pars = c("age"),
prob = 0.95)
# relax the priors
fm5 <- stan_glm(matings ~ age,
family = poisson(link = "identity"),
data   = elephant,
prior  = normal(0, 100),
prior_intercept = normal(0, 100),
seed   = 1)
print(fm5, digits = 3)
mcmc.sims <- as.matrix(fm5)
with(elephant, plot(matings ~ age, type = "n"))
sample.sims <- sample(nrow(mcmc.sims), size = 100)
for (i in sample.sims) {
abline(a = mcmc.sims[i, 1], b = mcmc.sims[i, 2], col = "skyblue")
}
abline(a = coef(fm5)['(Intercept)'], b = coef(fm5)['age'], col = "blue", lwd = 2)
with(elephant, points(matings ~ age, pch = 16))
post.predict <- posterior_predict(fm5)
with(elephant, plot(matings ~ age, type = "n"))
points(elephant$age, post.predict[1, ], pch = 1)
post.predict.sd <- apply(post.predict, 1, sd)
hist(post.predict.sd, breaks = 20)
abline(v = sd(elephant$matings), col = "red")
pp_check(fm5, plotfun = "stat", stat = "sd", binwidth = .1)
fm6 <- stan_glm(matings ~ age,
family = quasipoisson(link = "identity"),
data   = elephant,
prior  = normal(0, 100),
prior_intercept = normal(0, 100),
seed   = 1)
fm7 <- stan_glm(matings ~ age,
family = neg_binomial_2(link = "identity"),
data   = elephant,
prior  = normal(0, 100),
prior_intercept = normal(0, 100),
seed   = 1)
(sd_test2 <- pp_check(fm7, plotfun = "stat", stat = "sd", binwidth = .1))
require(R2jags)
elephant.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dpois (mu[j])      # data model:  the likelihood
mu[j] <- exp(eta[j])      # inverse link
eta[j] <- b0 + b1 * x[j]  # linear predictor
}
b0 ~ dnorm (0.0, 1E-6)       # prior for intercept
b1 ~ dnorm (0.0, 1E-6)       # prior for slope
}
jags.data <- list(y = elephant$matings,
x = elephant$age,
J = nrow(elephant))
jags.params <- c("b0", "b1")
jags.inits <- function(){
list("b0" = rnorm(1), "b1" = rnorm(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = elephant.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
elephant.model.2 <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dpois (mu[j])      # data model:  the likelihood
mu[j] <- exp(eta[j])      # inverse link
eta[j] ~ dnorm(b0 + b1 * x[j], tau_eps)  # linear predictor, includes observation-level random effect
}
b0 ~ dnorm (0.0, 1E-6)       # prior for intercept
b1 ~ dnorm (0.0, 1E-6)       # prior for slope
tau_eps ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
}
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
summary(mcmc.output)
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
plot(matings ~ age, data = elephant, type = "n")
subset.samples <- sample(nrow(mcmc.output), size = 100)
for(i in subset.samples) {
b0 <- mcmc.output$b0[i]
b1 <- mcmc.output$b1[i]
my.fit <- function(x) exp(b0 + b1 * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "deepskyblue",
lwd  = 1,
add  = TRUE)
}
with(elephant, points(matings ~ age, pch = 16))
post.means <- apply(mcmc.output, 2, mean)
my.fit <- function(x) exp(post.means['b0'] + post.means['b1'] * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "blue",
lwd  = 2,
add  = TRUE)
elephant.model.2 <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dpois (mu[j])      # data model:  the likelihood
mu[j] <- exp(eta[j])      # inverse link
eta[j] ~ dnorm(b0 + b1 * x[j], tau_eps)  # linear predictor, includes observation-level random effect
}
b0 ~ dnorm (0.0, 1E-6)       # prior for intercept
b1 ~ dnorm (0.0, 1E-6)       # prior for slope
tau_eps ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
}
jags.data <- list(y = elephant$matings,
x = elephant$age,
J = nrow(elephant))
jags.params <- c("b0", "b1", "sd_eps")
jags.inits <- function(){
list("b0" = rnorm(1), "b1" = rnorm(1), "tau_eps" = runif(1))
}
set.seed(1)
jagsfit2 <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = elephant.model.2,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
mcmc.output <- as.data.frame(jagsfit2$BUGSoutput$sims.list)
plot(matings ~ age, data = elephant, type = "n")
subset.samples <- sample(nrow(mcmc.output), size = 100)
for(i in subset.samples) {
b0 <- mcmc.output$b0[i]
b1 <- mcmc.output$b1[i]
my.fit <- function(x) exp(b0 + b1 * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "deepskyblue",
lwd  = 1,
add  = TRUE)
}
with(elephant, points(matings ~ age, pch = 16))
post.means <- apply(mcmc.output, 2, mean)
my.fit <- function(x) exp(post.means['b0'] + post.means['b1'] * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "blue",
lwd  = 2,
add  = TRUE)
quantile(mcmc.output$age, c(.025, .975))
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
names(mcmc.output)
quantile(mcmc.output$b1, c(.025, .975))
quantile(mcmc.output$b1, c(.025, 0.5, .975))
mcmc.output <- as.data.frame(jagsfit2$BUGSoutput$sims.list)
quantile(mcmc.output$b1, c(.025, 0.5, .975))
names(mcmc.output)
quantile(mcmc.output$sd_eps, c(.025, 0.5, .975))
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
apply(mcmc.output, 2, mean)
HPDinterval(mcmc.output, prob = 0.95)
HPDinterval(as.mcmc(mcmc.output), prob = 0.95)
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
knitr::opts_chunk$set(echo = TRUE)
require(pscl)
crab <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/crab.txt", head = T)
fm1 <- glm(y ~ width, data = crab, family = binomial(link = "logit"))
fm2 <- glm(y ~ width, data = crab, family = binomial(link = "probit"))
fm3 <- glm(y ~ width, data = crab, family = binomial(link = "cloglog"))
AIC(fm1, fm2, fm3)
width.vals <- with(crab, seq(from = min(width), to = max(width), length = 100))
p.vals <- predict(fm3, newdata = data.frame(width = width.vals),
type = "response", se.fit = TRUE)
plot(x = width.vals, y = p.vals$fit, xlab = "carapace width (cm)",
ylab = "probability of at least 1 satellite male",
type = "l", ylim = c(0, 1))
lines(x = width.vals, y = pmin(1, p.vals$fit + 1.96 * p.vals$se.fit), lty = "dashed")
lines(x = width.vals, y = pmax(0, p.vals$fit - 1.96 * p.vals$se.fit), lty = "dashed")
crab.ZIP.1  <- zeroinfl(satell ~ width, data = crab, dist = "pois",   link = "cloglog")
crab.ZINB.1 <- zeroinfl(satell ~ width, data = crab, dist = "negbin", link = "cloglog")
(lrt.stat <- as.numeric(-2 * (logLik(crab.ZIP.1) - logLik(crab.ZINB.1))))
(lrt.p <- pchisq(lrt.stat, df = 1, lower = FALSE) / 2)
crab.ZINB.2 <- zeroinfl(satell ~ 1 | width, data = crab, dist = "negbin", link = "cloglog")
summary(crab.ZINB.2)
(lrt.stat <- as.numeric(-2 * (logLik(crab.ZINB.2) - logLik(crab.ZINB.1))))
(lrt.p <- pchisq(lrt.stat, df = 1, lower = FALSE))
crab.ZINB.3 <- zeroinfl(satell ~ 1 | width, data = crab, dist = "negbin", link = "logit")
logLik(crab.ZINB.3)
crab.ZINB.4 <- zeroinfl(satell ~ width, data = crab, dist = "negbin", link = "logit")
(lrt.stat <- as.numeric(-2 * (logLik(crab.ZINB.3) - logLik(crab.ZINB.4))))
(lrt.p <- pchisq(lrt.stat, df = 1, lower = FALSE))
p.str.0 <- inv.logit(13.1283 - 0.5332 * width.vals)
inv.logit <- function(x) exp(x) / (1 + exp(x))
p.str.0 <- inv.logit(13.1283 - 0.5332 * width.vals)
expected.y <- exp(1.47294) * (1 - p.str.0)
plot(x = crab$width, y = crab$satell,
xlab = "carapace width (cm)",
ylab = "number of satellite males")
lines(x = width.vals, y = expected.y)
termite <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/termite.txt", head = T)
termite$index <- as.factor(termite$index)
require(lme4)
fm1 <- glmer(antennation ~ log(concentration) + (1 | colony / index),
family = "poisson",
data = termite)
summary(fm1)
pp <- profile(fm1)
confint(fm1)
resid.fm1 <- residuals(fm1, type = "deviance")
(resid.deviance <- sum(resid.fm1^2))
(df.residual(fm1))
fm2 <- glmer(antennation ~ log(concentration) + (1 | index),
family = "poisson",
data = termite)
anova(fm1, fm2)
fm3 <- glm(antennation ~ log(concentration),
family = "poisson",
data = termite)
anova(fm2, fm3)
summary(fm3)
summary(fm2)
(conditional.mean <- exp(3.83))
log.means <- rnorm(1e6, mean = 3.828, sd = 0.507)
(marginal.mean <- mean(exp(log.means)))
(marginal.mean.exact <- exp(3.828 + 0.2572 / 2))
getwd()
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
cod <- read.table("data/ParasiteCod.txt", head = T)
# remove observations with missing data
cod <- na.omit(cod)
summary(cod)
require(pscl)
formula.1 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area))
cod.nb.fm1 <- zeroinfl(formula.1, data  = cod, dist = "negbin")
summary(cod.nb.fm1)
formula.2 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area) | Length
+ as.factor(Year) + as.factor(Area))
cod.nb.fm2 <- zeroinfl(formula.2, data  = cod, dist = "negbin")
summary(cod.nb.fm2)
head(cod)
length.vals <- seq(100, from = min(cod$Length), to = max(cod.length))
length.vals <- seq(100, from = min(cod$Length), to = max(cod$Length))
par(mfrow = c(3, 4))
for (i in unique(cod$Year)) {
for (j in unique(cod$Area)) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = range(cod$Intensity), xlab = "", ylab = "", type = "n")
lines(predicted.vals ~ length.vals)
with(subset(cod, Year == i & Area == j), points(Intensity ~ Length))
mtext("length", side = 1, outer = T)
mtext("parasite intensity", side = 2, outer = T)
}
}
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4))
for (i in unique(cod$Year)) {
for (j in unique(cod$Area)) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = range(cod$Intensity), xlab = "", ylab = "", type = "n")
lines(predicted.vals ~ length.vals)
with(subset(cod, Year == i & Area == j), points(Intensity ~ Length))
mtext("length", side = 1, outer = T)
mtext("parasite intensity", side = 2, outer = T)
}
}
unique(cod$Year)
unique(cod$Area)
sort(unique(cod$Area))
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1))
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = range(cod$Intensity), xlab = "", ylab = "", type = "n")
lines(predicted.vals ~ length.vals)
with(subset(cod, Year == i & Area == j), points(Intensity ~ Length))
mtext("length", side = 1, outer = T)
mtext("parasite intensity", side = 2, outer = T)
}
}
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(4, 4, 0, 0))
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = range(cod$Intensity), xlab = "", ylab = "", type = "n")
lines(predicted.vals ~ length.vals)
with(subset(cod, Year == i & Area == j), points(Intensity ~ Length))
mtext("length", side = 1, outer = T)
mtext("parasite intensity", side = 2, outer = T)
}
}
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 0))
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = range(cod$Intensity), xlab = "", ylab = "", type = "n")
lines(predicted.vals ~ length.vals)
with(subset(cod, Year == i & Area == j), points(Intensity ~ Length))
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2)
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 0))
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = range(cod$Intensity), xlab = "", ylab = "", type = "n")
lines(log(predicted.vals + 1) ~ length.vals)
with(subset(cod, Year == i & Area == j), points(log(Intensity + 1) ~ Length))
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2)
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 0))
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = log(range(cod$Intensity) + 1), xlab = "", ylab = "", type = "n")
lines(log(predicted.vals + 1) ~ length.vals)
with(subset(cod, Year == i & Area == j), points(log(Intensity + 1) ~ Length))
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2)
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 0))
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = log(range(cod$Intensity) + 1), xlab = "", ylab = "", type = "n", yaxt = "n")
lines(log(predicted.vals + 1) ~ length.vals)
with(subset(cod, Year == i & Area == j), points(log(Intensity + 1) ~ Length))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2)
length.vals <- seq(from = min(cod$Length), to = max(cod$Length), length = 100)
par(mfrow = c(3, 4), mar = c(2, 2, 1, 1), oma = c(3, 3, 0, 0), las = 1)
for (i in unique(cod$Year)) {
for (j in sort(unique(cod$Area))) {
new.data <- data.frame(Length = length.vals, Year = i, Area = j)
predicted.vals <- predict(cod.nb.fm2, newdata = new.data, type = "response")
plot(x = range(cod$Length), y = log(range(cod$Intensity) + 1), xlab = "", ylab = "", type = "n", yaxt = "n")
lines(log(predicted.vals + 1) ~ length.vals)
with(subset(cod, Year == i & Area == j), points(log(Intensity + 1) ~ Length))
axis(2, at = log(c(0, 10, 100) + 1), lab = c(0, 10, 100))
}
}
mtext("length", side = 1, outer = T, line = 2)
mtext("parasite intensity", side = 2, outer = T, line = 2, las = 0)
exp(0.028)
