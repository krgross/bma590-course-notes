return(my.lo)
}
}
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.5)
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.25)
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.1)
PlotLoessFit(x = st16$depth, y = st16$sources, span = 0.25, degree = 1)
library(mgcv)
st16.spline <- gam(sources ~ s(depth), data = st16)
plot(st16.spline, se = TRUE)  # note that the plot does not include the intercept
summary(st16.spline)
with(st16, plot(sources ~ depth))
st16.fit <- predict(st16.spline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st16.fit$fit)
## add +/- 2 SE following Zuur; this is only approximate.
## should probably use a critical value from a t-dist with n - edf df, that is, 51 - 9.81 = 41.19 df
lines(x = depth.vals, y = st16.fit$fit + 2 * st16.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st16.fit$fit - 2 * st16.fit$se.fit, lty = "dashed")
AIC(st16.spline)
rm(list = ls())
require(mgcv)
bird <- read.table("data/Loyn.txt", head = T)
summary(bird)
# get rid of the 'Site' variable
bird <- bird[, -1]
# log-transform area, distance, ldistance
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
# change YR.ISOL to years since isolation (study was published in 1987)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
# keep the only the variables we want
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
bird.lm1 <- lm(ABUND ~ L.AREA + L.DIST + L.LDIST + YR.ISOL + GRAZE + ALT, data = bird)
summary(bird.lm1)
bird.lm2 <- lm(ABUND ~ L.AREA + YR.ISOL + GRAZE, data = bird)
plot(residuals(bird.lm2) ~ bird$L.AREA)
abline(h = 0, lty = "dashed")
bird.am1 <- gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT), data = bird)
summary(bird.am1)
plot(bird.am1)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT), data = bird)
summary(bird.am1)
plot(bird.am1)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.am2)
plot(bird.am2)
bird$fGRAZE <- as.factor(bird$GRAZE)
summary(bird)
bird.am3 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
summary(bird.am3)
AIC(bird.am2)
AIC(bird.am3)
with(bird, contrasts(fGRAZE))
bird.am4 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am4$residuals)
abline(h = 0, lty = "dashed")
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 5, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 5, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
summary(bird.am5)
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 5, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 5, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
bird.am5 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + GRAZE, data = bird)
bird.am6 <- gam(ABUND ~ s(L.AREA, k = 4, fx = TRUE) + fGRAZE, data = bird)
anova(bird.am5, bird.am6, test = "F")
bird.am3 <- gam(ABUND ~ s(L.AREA) + fGRAZE, data = bird)
plot(bird.am3)
summary(bird.am3)
rm(list = ls())
require(mgcv)
bird <- read.table("data/Loyn.txt", head = T)
summary(bird)
# get rid of the 'Site' variable; it is redundant with the row label
bird <- bird[, -1]
# log-transform area, distance, ldistance, to remove right-skew
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
# change YR.ISOL to years since isolation (study was published in 1987)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
# keep the only the variables we want
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
summary(bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) + GRAZE + s(ALT), data = bird)
summary(bird.am1)
library(Sleuth2)
str(ex0726)
births <- ex0726
require(reshape2)
names(births) <- c("year", "DK", "NL", "CA", "US")
births.melt <- melt(births, id.vars = c("year"))
births <- births.melt
rm(births.melt)
names(births) <- c("year", "country", "pct.male")
births$pct.male <- 100 * births$pct.male
births <- subset(births, year >= 1970 & year <= 1990)
summary(births)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
fm1 <- with(births, lm(pct.male ~ year * country))
summary(fm1)
births$yr.ctr <- births$year - 1980
fm1 <- with(births, lm(pct.male ~ yr.ctr * country))
summary(fm1)
fm1a <- with(births, lm(pct.male ~ country + yr.ctr:country- 1))
summary(fm1a)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
abline(a = 51.3671 - (-0.01112 * 1980), b = -0.01112)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
abline(a = 51.26 - (-0.0054286 * 1980), b = -0.0054286)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
abline(a = 51.3709 - (0.0008442 * 1980), b = 0.0008442)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
abline(a = 51.2162 - (-0.00652 * 1980), b = -0.0065195)
require(nlme)
gls1 <- gls(pct.male ~ yr.ctr * country, data = births, weights = varIdent(form = ~ 1 | country))
summary(gls1)
gls0 <- gls(pct.male ~ yr.ctr * country, data = births)  # OLS fit
anova(gls0, gls1)
gls0.ml <- gls(pct.male ~ yr.ctr * country, data = births, method = "ML")
gls1.ml <- gls(pct.male ~ yr.ctr * country, data = births,
weights = varIdent(form = ~ 1 | country), method = "ML")
anova(gls0.ml, gls1.ml)
summary(gls1.ml)
gls2 <- gls(pct.male ~ yr.ctr * country, data = births, weights = varIdent(form = ~ 1 | country),
correlation = corAR1(form = ~ 1 | country))
summary(gls2)
anova(gls1, gls2)
gls3.ml <- gls(pct.male ~ yr.ctr + country, data = births, weights = varIdent(form = ~ 1 | country),
method = "ML")
summary(gls3.ml)
anova(gls3.ml, gls1.ml)
gls4.ml <- gls(pct.male ~ yr.ctr, data = births, weights = varIdent(form = ~ 1 | country),
method = "ML")
summary(gls4.ml)
anova(gls4.ml, gls3.ml)
gls3a <- gls(pct.male ~ yr.ctr + country - 1, data = births, weights = varIdent(form = ~ 1 | country))
summary(gls3a)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
abline(a = 51.3671 + 0.00586 * 1980, b = -0.00586)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
abline(a = 51.26 + 0.00586 * 1980, b = -0.00586)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
abline(a = 51.371 + 0.00586 * 1980, b = -0.00586)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
abline(a = 51.2162 + 0.00586 * 1980, b = -0.00586)
summary(gls(pct.male ~ yr.ctr + country, data = births))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
knitr::opts_chunk$set(echo = TRUE)
require(lme4)
data(Dyestuff)
summary(Dyestuff)
with(Dyestuff, stripchart(Yield ~ Batch, pch = 16))
# mixed model, using lme4::lmer
fm1 <- lmer(Yield ~ 1, random = ~ 1 | Batch, data = Dyestuff)
# mixed model, using lme4::lmer
fm1 <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm1)
fm0 <- lm(Yield ~ 1, data = Dyestuff)          # model with common mean
fm1 <- lm(Yield ~ Batch - 1, data = Dyestuff)  # mean varies by group
anova(fm1, fm0)
summary(fm1)
fm0 <- lm(Yield ~ 1, data = Dyestuff)          # model with common mean
fm1 <- lm(Yield ~ Batch - 1, data = Dyestuff)  # mean varies by group
anova(fm0, fm1)
summary(fm1)
gls1 <- gls(Yield ~ 1, data = Dyestuff, correlation = corCompSymm(form = ~ 1 | Batch))
require(nlme)
gls1 <- gls(Yield ~ 1, data = Dyestuff, correlation = corCompSymm(form = ~ 1 | Batch))
summary(gls1)
fm3 <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
print(fm3)
fm3 <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm3)
1764 / (1764 + 2451)
var.B   <- 1764
var.eps <- 2451
var.B / (var.B + var.eps)
ranef(fm3)
1527.5 + ranef(fm1)
1527.5 + ranef(fm3)
1527.5 + ranef(fm3)$Batch
(batch.conditional.modes <- with(fm3$coefficients, fixed + random$Batch))
str(fm3)
fixef(fm3)
fixef(fm3)$Intercept
str(fixef(fm3))
fixef(fm3) + ranef(fm3)$Batch
fm3 <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm3)
require(lmerTest)
fm4 <- lmerTest::lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm4)
anova(fm0, fm3)
?anova.lmer
plot(x    = batch.means,
y    = batch.conditional.modes,
xlim = range(batch.means),
ylim = range(batch.means),
pch  = LETTERS[1:6])
(batch.means <- with(Dyestuff, tapply(Yield, Batch, mean)))
plot(x    = batch.means,
y    = batch.conditional.modes,
xlim = range(batch.means),
ylim = range(batch.means),
pch  = LETTERS[1:6])
(batch.conditional.modes <- fixef(fm3) + ranef(fm3)$Batch)
plot(x    = batch.means,
y    = batch.conditional.modes,
xlim = range(batch.means),
ylim = range(batch.means),
pch  = LETTERS[1:6])
(batch.conditional.modes <- as.vector(fixef(fm3) + ranef(fm3)$Batch))
(batch.conditional.modes <- fixef(fm3) + ranef(fm3)$Batch)
(batch.means <- with(Dyestuff, tapply(Yield, Batch, mean)))
plot(x    = batch.means,
y    = as.vector(batch.conditional.modes),
xlim = range(batch.means),
ylim = range(batch.means),
pch  = LETTERS[1:6])
length(batch.conditional.modes)
batch.conditional.modes
batch.conditional.modes$`(Intercept)`
(batch.conditional.modes <- fixef(fm3)$`(Intercept)` + ranef(fm3)$Batch)
fixef(fm3)
str(fixef(fm3))
(batch.conditional.modes <- fixef(fm3) + ranef(fm3)$Batch)
ranef(fm3)$Batch
ranef(fm3)$Batch$`(Intercept)`
plot(x    = batch.means,
y    = batch.conditional.modes$`(Intercept)`,
xlim = range(batch.means),
ylim = range(batch.means),
pch  = LETTERS[1:6])
abline(a = 0, b = 1)
plot(x    = batch.means,
y    = batch.conditional.modes$`(Intercept)`,
xlim = range(batch.means),
ylim = range(batch.means),
xlab = "sample means",
ylab = "conditional modes",
pch  = LETTERS[1:6])
abline(a = 0, b = 1)
cbind(batch.means, batch.conditional.modes$`(Intercept)`)
cbind(batch.means, cond.modes = batch.conditional.modes$`(Intercept)`)
(batch.conditional.modes <- (fixef(fm3) + ranef(fm3)$Batch)$`(Intercept)`)
cbind(batch.means, batch.conditional.modes)
plot(x    = batch.means,
y    = batch.conditional.modes,
xlim = range(batch.means),
ylim = range(batch.means),
xlab = "sample means",
ylab = "conditional modes",
pch  = LETTERS[1:6])
abline(a = 0, b = 1)
fm3ML <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff, REML = FALSE)
fm3ML <- lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff, REML = FALSE)
summary(fm3ML)
pr <- profile(fm3ML)
pr <- profile(fm3ML)
xyplot(pr)
pr <- profile(fm3ML)
lattice::xyplot(pr)
confint(pr, level = .95)
lattice::xyplot(pr)
lattice::xyplot(pr, absVal = TRUE)
confint(pr, level = 0.99)
require(lmerTest)
fm4 <- lmerTest::lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff)
summary(fm4)
?qt
1527.5 + 19.38 *  qt(c(0.025, 0.975), df = 5)
knitr::opts_chunk$set(echo = TRUE)
require(lme4)
data(Dyestuff)
summary(Dyestuff)
with(Dyestuff, stripchart(Yield ~ Batch, pch = 16))
str(Dyestuff)
levels(Dyestuff$Batch)
as.numeric(Dyestuff$Batch)
require(R2jags)
dyestuff.model <- function() {
## likelihood
for (j in 1:J) {
y[j]    ~ dnorm(B[batch[j]], tau_eps)  # data distribution
}
## latent variables
for (b in 1:5){
B[b] ~ dnorm(mu, tauB)
}
mu ~ dnorm (0.0, 1E-6)  # prior for the overall mean
tau_eps ~ dgamma (0.01, 0.01)
tauB    ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
sdB    <- pow(tauB, -1/2)
}
jags.data <- list(y     = Dyestuff$Yield,
batch = as.numeric(Dyestuff$Batch),
J     = nrow(Dyestuff))
jags.params <- c("mu", "sd_eps", "sdB", "B[1]", "B[2]")
jags.inits <- function(){
list("mu" = rnorm(1), "tauB" = runif(1), "tau_eps" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = dyestuff.model,
n.chains           = 3,
n.iter             = 2e5)
require(R2jags)
dyestuff.model <- function() {
## likelihood
for (j in 1:J) {
y[j]    ~ dnorm(B[batch[j]], tau_eps)  # data distribution
}
## latent variables
for (b in 1:6){
B[b] ~ dnorm(mu, tauB)
}
mu ~ dnorm (0.0, 1E-6)  # prior for the overall mean
tau_eps ~ dgamma (0.01, 0.01)
tauB    ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
sdB    <- pow(tauB, -1/2)
}
jags.data <- list(y     = Dyestuff$Yield,
batch = as.numeric(Dyestuff$Batch),
J     = nrow(Dyestuff))
jags.params <- c("mu", "sd_eps", "sdB", "B[1]", "B[2]")
jags.inits <- function(){
list("mu" = rnorm(1), "tauB" = runif(1), "tau_eps" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = dyestuff.model,
n.chains           = 3,
n.iter             = 2e5)
require(R2jags)
dyestuff.model <- function() {
## likelihood
for (j in 1:J) {
y[j]    ~ dnorm(B[batch[j]], tau_eps)  # data distribution
}
## latent variables
for (b in 1:6){
B[b] ~ dnorm(mu, tauB)
}
mu ~ dnorm (0.0, 1E-6)  # prior for the overall mean
tau_eps ~ dgamma (0.01, 0.01)
tauB    ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
sdB    <- pow(tauB, -1/2)
}
jags.data <- list(y     = Dyestuff$Yield,
batch = as.numeric(Dyestuff$Batch),
J     = nrow(Dyestuff))
jags.params <- c("mu", "sd_eps", "sdB", "B[1]", "B[2]")
jags.inits <- function(){
list("mu" = rnorm(1), "tauB" = runif(1), "tau_eps" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = dyestuff.model,
n.chains           = 3,
n.iter             = 2e5)
print(jagsfit)
# traceplot(jagsfit)  (traceplots omitted here to avoid excess output)
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
print(jagsfit)
traceplot(jagsfit)  (traceplots omitted here to avoid excess output)
print(jagsfit)
traceplot(jagsfit)
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
?traceplot
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
traceplot(jagsfit)
require(R2jags)
dyestuff.model <- function() {
## likelihood
for (j in 1:J) {
y[j]    ~ dnorm(B[batch[j]], tau_eps)  # data distribution
}
## latent variables
for (b in 1:6){
B[b] ~ dnorm(mu, tauB)
}
mu ~ dnorm (0.0, 1E-6)  # prior for the overall mean
tau_eps ~ dgamma (0.01, 0.01)
tauB    ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
sdB    <- pow(tauB, -1/2)
}
jags.data <- list(y     = Dyestuff$Yield,
batch = as.numeric(Dyestuff$Batch),
J     = nrow(Dyestuff))
jags.params <- c("mu", "sd_eps", "sdB", "B[1]", "B[2]")
jags.inits <- function(){
list("mu" = rnorm(1), "tauB" = runif(1), "tau_eps" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = dyestuff.model,
n.chains           = 3,
n.iter             = 2e6)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
require(R2jags)
dyestuff.model <- function() {
## likelihood
for (j in 1:J) {
y[j]    ~ dnorm(B[batch[j]], tau_eps)  # data distribution
}
## latent variables
for (b in 1:6){
B[b] ~ dnorm(mu, tauB)
}
mu ~ dnorm (0.0, 1E-6)  # prior for the overall mean
tau_eps ~ dgamma (0.01, 0.01)
tauB    ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
sdB    <- pow(tauB, -1/2)
}
jags.data <- list(y     = Dyestuff$Yield,
batch = as.numeric(Dyestuff$Batch),
J     = nrow(Dyestuff))
jags.params <- c("mu", "sd_eps", "sdB", "B[1]", "B[2]")
jags.inits <- function(){
list("mu" = rnorm(1), "tauB" = runif(1), "tau_eps" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = dyestuff.model,
n.chains           = 3,
n.iter             = 2e5)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
par(mfrpow = c(3, 2))
densityplot(jagsfit.mcmc)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
par(mfrow = c(3, 2))
densityplot(jagsfit.mcmc)
?densityplot
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
print(jagsfit)
traceplot(jagsfit, varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
