getwd()
horse <- read.table("data/horse.txt", header = TRUE)
horse <- read.table("/data/horse.txt", header = TRUE)
horse <- read.table("data/horse.txt", header = TRUE)
install.packages("bookdown")
file.create('.nojekyll').
file.create('.nojekyll')
horse <- read.table("data/horse.txt", header = TRUE)
str(horse)
?dpois
lambda.values <- seq(from = 0, to = 5, by = 0.01)
my.lhood <- dpois(x = 2, lambda = lambda.values)
plot(lambda.vals, my.lhood, xlab = expression(lambda), ylab = "Likelihood", type = "l")
lambda.vals <- seq(from = 0, to = 5, by = 0.01)
my.lhood <- dpois(x = 2, lambda = lambda.values)
plot(lambda.vals, my.lhood, xlab = expression(lambda), ylab = "Likelihood", type = "l")
plot(lambda.vals, my.lhood, xlab = expression(lambda), ylab = "Likelihood", type = "l")
abline(v = 2, col = "red")
horse <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/horse.txt", header = TRUE)
source('~/Teaching/bma590/bma590-fall21/r/class01.R')
install.packages("numDeriv", repos = "http://cran.rstudio.com")
install.packages("numDeriv", repos = "http://cran.rstudio.com")
?numDeriv
?numDeriv::hessian
library(emdbook)
data("ReedfrogFuncresp")
# rename something shorter
frog <- ReedfrogFuncresp
rm(ReedfrogFuncresp)
frog.neg.ll <- function(params){
a <- params[1]
h <- params[2]
prob.vals <- a / (1 + a * h * frog$Initial)
ll.vals <- dbinom(frog$Killed, size = frog$Initial, prob = prob.vals, log = TRUE)
-1 * sum(ll.vals)
}
frog.mle <- optim(par = c(0.5, 1/60),
fn  = frog.neg.ll)
(a.mle <- frog.mle$par[1])
(h.mle <- frog.mle$par[2])
(D2 <- numDeriv::hessian(func = frog.neg.ll, x = c(a.mle, h.mle)))
# invert to get var-cov matrix
(var.matrix <- solve(D2))
(a.se <- sqrt(var.matrix[1, 1]))
(h.se <- sqrt(var.matrix[2, 2]))
(lower.approx <- a.mle - qnorm(.975) * a.se)
(upper.approx <- a.mle + qnorm(.975) * a.se)
?cov2cor
cov2cor(var.matrix)
