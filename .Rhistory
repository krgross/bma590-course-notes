jags.inits <- function(){
list("a" = rnorm(1), "b" = rnorm(1), "tau_eps" = runif(1))
}
set.seed(1)
jagsfit2 <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = elephant.model.2,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
mcmc.output <- as.data.frame(jagsfit2$BUGSoutput$sims.list)
apply(mcmc.output, 2, mean)
HPDinterval(as.mcmc(mcmc.output), prob = 0.95)
plot(matings ~ age, data = elephant, type = "n")
subset.samples <- sample(nrow(mcmc.output), size = 100)
for(i in subset.samples) {
a <- mcmc.output$a[i]
b <- mcmc.output$b[i]
my.fit <- function(x) exp(a + b * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "deepskyblue",
lwd  = 1,
add  = TRUE)
}
with(elephant, points(matings ~ age, pch = 16))
post.means <- apply(mcmc.output, 2, mean)
my.fit <- function(x) exp(post.means['a'] + post.means['b'] * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "blue",
lwd  = 2,
add  = TRUE)
getwd()
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/data/")
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
rm(list = ls())
boar <- read.table("C:/Users/krgross/Documents/Teaching/bma590/ZuurDataMixedModelling/Boar.txt", head = T)
# remove incomplete records
boar <- na.omit(boar)
# convert sex to a factor
boar$SEX <- as.factor(boar$SEX)
names(boar) <- c("tb", "sex", "age", "length")
fm1 <- glm(tb ~ length, family = binomial(link = "logit"), data = boar)
summary(fm1)
with(boar, plot(tb ~ length))
new.data <- data.frame(length = seq(from = min(boar$length),
to   = max(boar$length),
length = 100))
predict.fm1 <- predict(fm1, newdata = new.data, type = "response", se.fit = TRUE)
lines(x = new.data$length, y = predict.fm1$fit, col = "red")
lines(x   = new.data$length,
y   = predict.fm1$fit - 1.96 * predict.fm1$se.fit,
col = "red",
lty = "dashed")
lines(x   = new.data$length,
y   = predict.fm1$fit + 1.96 * predict.fm1$se.fit,
col = "red",
lty = "dashed")
fm1a <- glm(tb ~ length, family = binomial(link = "probit"), data = boar)
fm1b <- glm(tb ~ length, family = binomial(link = "cloglog"), data = boar)
AIC(fm1, fm1a, fm1b)
predict.fm1a <- predict(fm1a, newdata = new.data, type = "response", se.fit = TRUE)
predict.fm1b <- predict(fm1b, newdata = new.data, type = "response", se.fit = TRUE)
with(boar, plot(tb ~ length))
lines(x = new.data$length, y = predict.fm1$fit, col = "red", lwd = 2)
lines(x = new.data$length, y = predict.fm1a$fit, col = "blue", lwd = 2)
lines(x = new.data$length, y = predict.fm1b$fit, col = "forestgreen", lwd = 2)
legend("left",
leg = c("logit", "probit", "cloglog"),
col = c("red", "blue", "forestgreen"),
pch = 16)
fm2 <- glm(tb ~ length + sex * as.factor(age),
family = binomial,
data = boar)
summary(fm2)
with(boar, table(tb, age, sex))
fm3 <- glm(tb ~ length + sex + as.factor(age),
family = binomial,
data = boar)
summary(fm3)
rm(list = ls())
moth <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/moth.txt", head = T)
fm1 <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = binomial,
data = moth)
summary(fm1)
fm1q <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = quasibinomial(link = "logit"),
data = moth)
summary(fm1q)
plot(x = moth$distance,
y = residuals(fm1q, type = "deviance"),
xlab = "distance",
ylab = "Deviance residuals")
abline(h = 0, lty = "dashed")
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.01, 0.01)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
rm(list = ls())
moth <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/moth.txt", head = T)
fm1 <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = binomial,
data = moth)
summary(fm1)
fm1q <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = quasibinomial(link = "logit"),
data = moth)
summary(fm1q)
plot(x = moth$distance,
y = residuals(fm1q, type = "deviance"),
xlab = "distance",
ylab = "Deviance residuals")
abline(h = 0, lty = "dashed")
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.01, 0.01)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
summary(moth)
moth <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/moth.txt", head = TRUE,
stringsAsFactors = TRUE)
fm1 <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = binomial,
data = moth)
summary(fm1)
fm1q <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = quasibinomial(link = "logit"),
data = moth)
summary(fm1q)
plot(x = moth$distance,
y = residuals(fm1q, type = "deviance"),
xlab = "distance",
ylab = "Deviance residuals")
abline(h = 0, lty = "dashed")
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.01, 0.01)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
getwd()
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
moth <- read.table("data/moth.txt", head = TRUE, stringsAsFactors = TRUE)
fm1 <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = binomial(link = "logit"),
data = moth)
summary(fm1)
fm1q <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = quasibinomial(link = "logit"),
data = moth)
summary(fm1q)
plot(x = moth$distance,
y = residuals(fm1q, type = "deviance"),
xlab = "distance",
ylab = "Deviance residuals")
abline(h = 0, lty = "dashed")
moth.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j]   ~ dbin(p[j], n[j])      # data distribution
p[j]   <- ilogit(eta[j])      # inverse link
eta[j] <- a[morph[j]] + b[morph[j]] * dist[j] + L[loc[j]]  # linear predictor,
}
for (j in 1:7){  # random effects for location
L[j] ~ dnorm(0, tau_L)
}
a[1] ~ dnorm (0.0, 1E-6)       # priors for intercept
a[2] ~ dnorm (0.0, 1E-6)       # priors for intercept
b[1] ~ dnorm (0.0, 1E-6)       # prior for slope
b[2] ~ dnorm (0.0, 1E-6)       # prior for slope
tau_L   ~ dgamma (0.01, 0.01)    # prior for location-level random effect
sd_L   <- pow(tau_L, -1/2)
b.diff <- b[1] - b[2]
}
jags.data <- list(y     = moth$removed,
n     = moth$placed,
dist  = moth$distance,
loc   = as.numeric(moth$location),
morph = as.numeric(moth$morph),
J     = nrow(moth))
jags.params <- c("a[1]", "a[2]", "b[1]", "b[2]", "b.diff", "sd_L")
jags.inits <- function(){
list("tau_L" = runif(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = moth.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
print(jagsfit)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
bayesplot::mcmc_areas(mcmc.output,
pars = c("b.diff"),
prob = 0.95)
table(mcmc.output$b.diff > 0)
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
elephant <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/elephant.txt", head = T)
with(elephant, plot(matings ~ age))
elephant.model <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dpois (mu[j])      # data distribution, given fitted value
mu[j] <- exp(eta[j])      # inverse link
eta[j] <- a + b * x[j]  # linear predictor
}
a ~ dnorm (0.0, 1E-6)       # prior for intercept
b ~ dnorm (0.0, 1E-6)       # prior for slope
}
jags.data <- list(y = elephant$matings,
x = elephant$age,
J = nrow(elephant))
jags.params <- c("a", "b")
jags.inits <- function(){
list("a" = rnorm(1), "b" = rnorm(1))
}
set.seed(1)
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = elephant.model,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
mcmc.output <- as.data.frame(jagsfit$BUGSoutput$sims.list)
apply(mcmc.output, 2, mean)
HPDinterval(as.mcmc(mcmc.output), prob = 0.95)
plot(matings ~ age, data = elephant, type = "n")
subset.samples <- sample(nrow(mcmc.output), size = 100)
for(i in subset.samples) {
a <- mcmc.output$a[i]
b <- mcmc.output$b[i]
my.fit <- function(x) exp(a + b * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "deepskyblue",
lwd  = 1,
add  = TRUE)
}
with(elephant, points(matings ~ age, pch = 16))
post.means <- apply(mcmc.output, 2, mean)
my.fit <- function(x) exp(post.means['a'] + post.means['b'] * x)
curve(my.fit,
from = min(elephant$age),
to   = max(elephant$age),
col  = "blue",
lwd  = 2,
add  = TRUE)
elephant.model.2 <- function() {
for (j in 1:J) {             # J = number of data points
y[j] ~ dpois (mu[j])      # data model:  the likelihood
mu[j] <- exp(eta[j])      # inverse link
eta[j] ~ dnorm(a + b * x[j], tau_eps)  # linear predictor, includes observation-level random effect
}
a ~ dnorm (0.0, 1E-6)       # prior for intercept
b ~ dnorm (0.0, 1E-6)       # prior for slope
tau_eps ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
}
jags.data <- list(y = elephant$matings,
x = elephant$age,
J = nrow(elephant))
jags.params <- c("a", "b", "sd_eps")
jags.inits <- function(){
list("a" = rnorm(1), "b" = rnorm(1), "tau_eps" = runif(1))
}
set.seed(1)
jagsfit2 <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = elephant.model.2,
n.chains           = 3,
n.iter             = 5E4,
n.thin             = 5)
mcmc.output <- as.data.frame(jagsfit2$BUGSoutput$sims.list)
apply(mcmc.output, 2, mean)
print(jagsfit)
print(jagsfit2)
rm(list = ls())
boar <- read.table("C:/Users/krgross/Documents/Teaching/bma590/ZuurDataMixedModelling/Boar.txt", head = T)
# remove incomplete records
boar <- na.omit(boar)
# convert sex to a factor
boar$SEX <- as.factor(boar$SEX)
names(boar) <- c("tb", "sex", "age", "length")
fm1 <- glm(tb ~ length,
family = binomial(link = "logit"),
data = boar)
summary(fm1)
summary(fm1)
with(boar, plot(tb ~ length))
new.data <- data.frame(length = seq(from = min(boar$length),
to   = max(boar$length),
length = 100))
predict.fm1 <- predict(fm1, newdata = new.data, type = "response", se.fit = TRUE)
lines(x = new.data$length, y = predict.fm1$fit, col = "red")
lines(x   = new.data$length,
y   = predict.fm1$fit - 1.96 * predict.fm1$se.fit,
col = "red",
lty = "dashed")
lines(x   = new.data$length,
y   = predict.fm1$fit + 1.96 * predict.fm1$se.fit,
col = "red",
lty = "dashed")
.0335/4
fm1a <- glm(tb ~ length, family = binomial(link = "probit"), data = boar)
AIC(fm1, fm1a)
fm1b <- glm(tb ~ length, family = binomial(link = "cloglog"), data = boar)
predict.fm1a <- predict(fm1a, newdata = new.data, type = "response", se.fit = TRUE)
predict.fm1b <- predict(fm1b, newdata = new.data, type = "response", se.fit = TRUE)
with(boar, plot(tb ~ length))
lines(x = new.data$length, y = predict.fm1$fit, col = "red", lwd = 2)
lines(x = new.data$length, y = predict.fm1a$fit, col = "blue", lwd = 2)
lines(x = new.data$length, y = predict.fm1b$fit, col = "forestgreen", lwd = 2)
legend("left",
leg = c("logit", "probit", "cloglog"),
col = c("red", "blue", "forestgreen"),
pch = 16)
AIC(fm1, fm1a, fm1b)
?glm
summary(boar)
fm2 <- glm(tb ~ length + sex * as.factor(age),
family = binomial,
data = boar)
summary(fm2)
with(boar, table(tb, age, sex))
rm(list = ls())
moth <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/moth.txt", head = TRUE,
stringsAsFactors = TRUE)
head(moth)
with(moth, cbind(removed, placed-removed))
fm1 <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = binomial,
data = moth)
summary(fm1)
fm1q <- glm(cbind(removed, placed - removed) ~ morph * distance,
family = quasibinomial(link = "logit"),
data = moth)
summary(fm1q)
plot(x = moth$distance,
y = residuals(fm1q, type = "deviance"),
xlab = "distance",
ylab = "Deviance residuals")
abline(h = 0, lty = "dashed")
require(VGAM)
?VGAM::corbet
summary(corbet)
require(VGAM)
data(corbet)
with(corbet, barplot(species, names = ofreq))
head(corbet)
require(VGAM)
data(corbet)
head(corbet)
with(corbet, barplot(species, names = ofreq,
xlab = "no. of individuals",
ylab = "frequency"))
corbet.fit <- vglm(ofreq ~ 1, family = posnegbinomial, weights = species, data = corbet)
Coef(corbet.fit)
mu.hat <- Coef(corbet.fit)["munb"]
k.hat  <- Coef(corbet.fit)["size"]
fitted.probs <- dposnegbin(x = corbet$ofreq, mu = mu.hat, size = k.hat)
?VGAM::posnegbinomial
corbet.fit <- vglm(ofreq ~ 1, family = posnegbinomial, weights = species, data = corbet)
Coef(corbet.fit)
mu.hat <- Coef(corbet.fit)["munb"]
k.hat  <- Coef(corbet.fit)["size"]
fitted.probs <- dposnegbinomial(x = corbet$ofreq, mu = mu.hat, size = k.hat)
fit <- vglm(ofreq ~ 1, posnegbinomial, weights = species, data = corbet)
coef(fit, matrix = TRUE)
Coef(fit)
(khat <- Coef(fit)["size"])
pdf2 <- dgaitnbinom(with(corbet, ofreq), khat, munb.p = fitted(fit), truncate = 0)
print(with(corbet, cbind(ofreq, species, fitted = pdf2*sum(species))), dig = 1)
corbet.fit <- vglm(ofreq ~ 1, family = posnegbinomial, weights = species, data = corbet)
Coef(corbet.fit)
mu.hat <- Coef(corbet.fit)["munb"]
k.hat  <- Coef(corbet.fit)["size"]
fitted.probs <- dgaitnbinom(x = corbet$ofreq, mu = mu.hat, size = k.hat)
fitted(corbet.fit)
corbet.fit <- vglm(ofreq ~ 1, family = posnegbinomial, weights = species, data = corbet)
Coef(corbet.fit)
mu.hat <- Coef(corbet.fit)["munb"]
k.hat  <- Coef(corbet.fit)["size"]
fitted.probs <- dgaitnbinom(x = corbet$ofreq, k.hat, munb.p = fitted(corbet.fit), truncate = 0)
fitted.vals <- sum(corbet$species) * fitted.probs
barplot(cbind(corbet$species, fitted.vals), beside = T)
?barplot
corbet.fit <- vglm(ofreq ~ 1, family = posnegbinomial, weights = species, data = corbet)
Coef(corbet.fit)
mu.hat <- Coef(corbet.fit)["munb"]
k.hat  <- Coef(corbet.fit)["size"]
fitted.probs <- dgaitnbinom(x = corbet$ofreq, k.hat, munb.p = fitted(corbet.fit), truncate = 0)
fitted.vals <- sum(corbet$species) * fitted.probs
barplot(cbind(corbet$species, fitted.vals), beside = T, names = c("actual", "fitted"))
dnbinom(0:2, size = khat, mu = mu.hat, log = FALSE)
fitted.probs[1:2]
fitted.probs[1] / fitted.probs[2]
dnbinom(1, size = khat, mu = mu.hat, log = FALSE) / dnbinom(2, size = khat, mu = mu.hat, log = FALSE)
?pscl::zeroinfl
cod <- read.table("datya/ParasiteCod.txt", head = T)
cod <- read.table("data/ParasiteCod.txt", head = T)
# remove observations with missing data
cod <- na.omit(cod)
cod <- read.table("data/ParasiteCod.txt", head = T)
# remove observations with missing data
cod <- na.omit(cod)
summary(cod)
formula.1 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area))
cod.nb.fm1 <- zeroinfl(formula.1, data  = cod, dist = "negbin")
require(pscl)
formula.1 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area))
cod.nb.fm1 <- zeroinfl(formula.1, data  = cod, dist = "negbin")
summary(cod.nb.fm1)
summary(cod)
with(cod, table(Prevalence))
with(cod, table(Year, Area, Intensity > 0))
formula.2 <- formula(Intensity ~ Length + as.factor(Year) + as.factor(Area) | Length + as.factor(Year) * as.factor(Area))
cod.nb.fm2 <- zeroinfl(formula.2, data  = cod, dist = "negbin")
summary(cod.nb.fm2)
formula.2 <- formula(Intensity ~ Length + as.factor(Year) * as.factor(Area) | Length + as.factor(Year) + as.factor(Area))
cod.nb.fm2 <- zeroinfl(formula.2, data  = cod, dist = "negbin")
summary(cod.nb.fm2)
formula.3 <- formula(Intensity ~ Length + as.factor(Year) + as.factor(Area) | as.factor(Year) * as.factor(Area))
cod.hurdle.fm3 <- hurdle(formula.3, data = cod, dist = "negbin")
summary(cod.hurdle.fm3)
