dyestuff.model <- function() {
## likelihood
for (j in 1:J) {
y[j]    ~ dnorm(B[batch[j]], tau_eps)  # data distribution
}
## latent variables
for (b in 1:6){
B[b] ~ dnorm(mu, tauB)
}
mu ~ dnorm (0.0, 1E-6)  # prior for the overall mean
tau_eps ~ dgamma (0.01, 0.01)
tauB    ~ dgamma (0.01, 0.01)
sd_eps <- pow(tau_eps, -1/2)
sdB    <- pow(tauB, -1/2)
}
jags.data <- list(y     = Dyestuff$Yield,
batch = as.numeric(Dyestuff$Batch),
J     = nrow(Dyestuff))
jags.params <- c("mu", "sd_eps", "sdB", "B[1]", "B[2]")
jags.inits <- function(){
list("mu" = rnorm(1), "tauB" = runif(1), "tau_eps" = runif(1))
}
jagsfit <- jags(data               = jags.data,
inits              = jags.inits,
parameters.to.save = jags.params,
model.file         = dyestuff.model,
n.chains           = 3,
n.iter             = 2e5)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
par(mfrpow = c(3, 2))
densityplot(jagsfit.mcmc)
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
par(mfrow = c(3, 2))
densityplot(jagsfit.mcmc)
?densityplot
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
print(jagsfit)
traceplot(jagsfit, varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
print(jagsfit)
traceplot(jagsfit, mfrow = c(2, 2), varname = c("mu", "sd_eps", "sdB", "B[1]"))
require(lattice)
jagsfit.mcmc <- as.mcmc(jagsfit)
densityplot(jagsfit.mcmc, mfrow = c(3, 2))
?rstanarm::prior_summary
cricket <- read.table("data/cricket.txt", header = TRUE)
cricket.slr <- lm(chirps ~ temperature, data = cricket)
summary(cricket.slr)
plot(chirps ~ temperature, data = cricket)
abline(cricket.slr)
require(rstanarm)
cricket$temp.ctr <- with(cricket, tmeperature - mean(temperature))
cricket$temp.ctr <- with(cricket, temperature - mean(temperature))
stanarm.cricket.fit <- stan_glm(chirps ~ temp.ctr, data = cricket, family = gaussian, seed = 1)
prior_summary(stanarm.cricket.fit)
unlink('06-HierarchicalModels_cache', recursive = TRUE)
render_book(output_format = "bookdown:gitbook")
require(rbookdown)
require(bookdown)
render_book(output_format = "bookdown:gitbook")
unlink('06-HierarchicalModels_cache', recursive = TRUE)
unlink('05-GeneralizedLeastSquares_cache', recursive = TRUE)
unlink('06-HierarchicalModels_cache', recursive = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
pwd()
getwd()
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
knitr::opts_chunk$set(echo = TRUE)
require(lme4)
require(lmerTest)
rikz <- read.table("C:/Users/krgross/Documents/Teaching/bma590/ZuurDataMixedModelling/RIKZ.txt", head = T)
with(rikz, plot(Richness ~ NAP, pch = Beach))  # raw response; note the non-constant variance
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))  # transformation stabilizes the variance
legend("topright", leg = 1:9, pch = 1:9)
# change the Beach variable to a factor
# would have been better to code the beaches as b1, b2, ...
rikz$fBeach <- as.factor(rikz$Beach)
contrasts(rikz$fBeach) <- contr.sum(n = 9)
fm0 <- lm(sqrt(Richness) ~ fBeach + NAP, data = rikz)
summary(fm0)
coef(fm0)
confint(fm0, level = 0.95)
anova(fm0)
fm0 <- lm(sqrt(Richness) ~ fBeach + NAP - 1, data = rikz)
summary(fm0)
confint(fm0, level = 0.95)
fm0 <- lm(sqrt(Richness) ~ fBeach + NAP, data = rikz)
summary(fm0)
confint(fm0, level = 0.95)
fm0a <- lm()
anova(fm0)
fm0.temp <- lm(sqrt(Richness) ~ fBeach + NAP - 1, data = rikz)
coef(fm0.temp)
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))
legend("topright", leg = 1:9, pch = 1:9)
# add a line for each beach
for(i in 1:9){
abline(a = coef(fm0.temp)[i], b = b, col = "red", lty = "dotted")
}
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))
legend("topright", leg = 1:9, pch = 1:9)
# add a line for each beach
b <- coef(fm0)["NAP"]
for(i in 1:9){
abline(a = coef(fm0.temp)[i], b = b, col = "red", lty = "dotted")
}
rm(fm0.temp)
#######################
# Model 1: random intercept
#######################
fm1 <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 | fBeach), data = rikz)
summary(fm1)
fixef(fm1)
ranef(fm1)
(beach.conditional.modes <- (fixef(fm1)["(Intercept)"] + ranef(fm1)$fBeach$`(Intercept)`))
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))
legend("topright", leg = 1:9, pch = 1:9)
a <- coef(summary(fm1))[1, 1]
b <- coef(summary(fm1))[2, 1]
abline(a = a, b = b, col = "red", lwd = 2)
# make a plot with a line for each beach
for(i in 1:9){
abline(a = beach.conditional.modes[i], b = b, col = "red", lty = "dotted")
}
fm0b <- lm(sqrt(Richness) ~ fBeach * NAP, data = rikz)
summary(fm0b)
anova(fm0, fm0b)
fm0b.temp <- lm(sqrt(Richness) ~ fBeach * NAP - 1, data = rikz)
summary(fm0b.temp)
fm0b.temp <- lm(sqrt(Richness) ~ 0 + NAP + fBeach:NAP, data = rikz)
summary(fm0b.temp)
fm0b.temp <- lm(sqrt(Richness) ~ NAP + fBeach:NAP - 1, data = rikz)
summary(fm0b.temp)
fm0b.temp <- lm(sqrt(Richness) ~ -1 + fBeach + fBeach:NAP, data = rikz)
summary(fm0b.temp)
coef(fm0b.temp)
fm0b.temp <- lm(sqrt(Richness) ~ fBeach + fBeach:NAP - 1, data = rikz)
(beach.params <- data.frame(beach     = 1:9,
intercept = coef(fm0b.temp)[1:9],
slopes    = coef(fm0b.temp)[10:18]))
fm0b.temp <- lm(sqrt(Richness) ~ fBeach + fBeach:NAP - 1, data = rikz)
(beach.params <- data.frame(beach     = 1:9,
intercept = coef(fm0b.temp)[1:9],
slopes    = coef(fm0b.temp)[10:18]))
row.names(beach.params) <- NULL
fm0b.temp <- lm(sqrt(Richness) ~ fBeach + fBeach:NAP - 1, data = rikz)
(fixed.params <- data.frame(beach     = 1:9,
intercept = coef(fm0b.temp)[1:9],
slopes    = coef(fm0b.temp)[10:18]))
row.names(fixed.params) <- NULL
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))
legend("topright", leg = 1:9, pch = 1:9)
for(i in 1:9){
abline(a = fixed.params$intercept[i], b = fixed.params$slope[i],
col = "red", lty = "dotted")
}
rm(fm0b.temp)
#######################
# Model 2: random slope and intercept (possibly correlated)
#######################
fm2 <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 + NAP | fBeach), data = rikz)
summary(fm2)
anova(fm1, fm2a, fm2)
#######################
# Model 2a: random slope and intercept (independent)
#######################
fm2a <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 | fBeach) + (0 + NAP | fBeach), data = rikz)
summary(fm2a)
anova(fm1, fm2a, fm2)
anova(fm1, fm2)
fixef(fm2a)
ranef(fm2a)
beach.cm.intercepts <- (fixef(fm2a)["(Intercept)"] + ranef(fm2a)$fBeach$`(Intercept)`)
beach.cm.intercepts <- (fixef(fm2a)["NAP"] + ranef(fm2a)$fBeach$`NAP`)
(conditional.modes  <- data.frame(beach     = 1:9,
intercept = fixef(fm2a)["(Intercept)"] + ranef(fm2a)$fBeach$`(Intercept)`,
slopes    = fixef(fm2a)["NAP"] + ranef(fm2a)$fBeach$`NAP`))
row.names(conditional.modes) <- NULL
fm0b.temp <- lm(sqrt(Richness) ~ fBeach + fBeach:NAP - 1, data = rikz)
(fixed.params <- data.frame(beach     = 1:9,
intercept = coef(fm0b.temp)[1:9],
slope     = coef(fm0b.temp)[10:18]))
row.names(fixed.params) <- NULL
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))
legend("topright", leg = 1:9, pch = 1:9)
for(i in 1:9){
abline(a = fixed.params$intercept[i], b = fixed.params$slope[i],
col = "red", lty = "dotted")
}
rm(fm0b.temp)
par(mfrow = c(1, 2))
with(fixed.params, plot(slope ~ intercept, main = "fixed-effects fit", pch = 1:9))
with(fixed.params, plot(slope ~ intercept, main = "conditional modes", type = "n"))
with(conditional.modes, points(slope ~ intercept, pch = 1:9))
(conditional.modes  <- data.frame(beach     = 1:9,
intercept = fixef(fm2a)["(Intercept)"] + ranef(fm2a)$fBeach$`(Intercept)`,
slope     = fixef(fm2a)["NAP"] + ranef(fm2a)$fBeach$`NAP`))
row.names(conditional.modes) <- NULL
par(mfrow = c(1, 2))
with(fixed.params, plot(slope ~ intercept, main = "fixed-effects fit", pch = 1:9))
with(fixed.params, plot(slope ~ intercept, main = "conditional modes", type = "n"))
with(conditional.modes, points(slope ~ intercept, pch = 1:9))
#######################
# Model 2a: random slope and intercept (independent)
#######################
fm2a <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 | fBeach) + (0 + NAP | fBeach), data = rikz)
summary(fm2a)
par(mfrow = c(1, 2))
with(fixed.params, plot(slope ~ intercept, main = "fixed-effects fit", pch = 1:9))
with(fixed.params, plot(slope ~ intercept, main = "conditional modes", type = "n"))
with(conditional.modes, points(slope ~ intercept, pch = 1:9))
points(fixef(fm2a)[1], fixef(fm2a)[2], pch = 16, col = "red")
par(mfrow = c(1, 2))
with(fixed.params, plot(slope ~ intercept, main = "fixed-effects fit", pch = 1:9))
with(fixed.params, plot(slope ~ intercept, main = "conditional modes", type = "n"))
with(conditional.modes, points(slope ~ intercept, pch = 1:9))
points(fixef(fm2a)[1], fixef(fm2a)[2], pch = 16, col = "red", cex = 2)
par(mfrow = c(1, 1))
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach. main = "Random-coefficients fit"))
par(mfrow = c(1, 1))
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Random-coefficients fit"))
legend("topright", leg = 1:9, pch = 1:9)
for(i in 1:9){
abline(a = conditional.modes$intercept[i], b = conditional.modes$slope[i],
col = "red", lty = "dotted")
}
fm0b.temp <- lm(sqrt(Richness) ~ fBeach + fBeach:NAP - 1, data = rikz)
(fixed.params <- data.frame(beach     = 1:9,
intercept = coef(fm0b.temp)[1:9],
slope     = coef(fm0b.temp)[10:18]))
row.names(fixed.params) <- NULL
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Fixed-effects fit, with beach-NAP interaction"))
legend("topright", leg = 1:9, pch = 1:9)
for(i in 1:9){
abline(a = fixed.params$intercept[i], b = fixed.params$slope[i],
col = "red", lty = "dotted")
}
rm(fm0b.temp)
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Random intercepts fit"))
legend("topright", leg = 1:9, pch = 1:9)
a <- coef(summary(fm1))[1, 1]
b <- coef(summary(fm1))[2, 1]
abline(a = a, b = b, col = "red", lwd = 2)
# make a plot with a line for each beach
for(i in 1:9){
abline(a = beach.conditional.modes[i], b = b, col = "red", lty = "dotted")
}
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Fixed-effects fit, additive model"))
legend("topright", leg = 1:9, pch = 1:9)
# add a line for each beach
b <- coef(fm0)["NAP"]
for(i in 1:9){
abline(a = coef(fm0.temp)[i], b = b, col = "red", lty = "dotted")
}
#######################
# Model 3: random intercept, with effect of exposure
#######################
fm3 <- lmerTest::lmer(sqrt(richness) ~ 1 + fExp * NAP + (1 + NAP| beach), data = rikz)
# create an 'exposure' factor, with two levels: low and high
with(rikz, table(fBeach, Exposure))
rikz$fExp <- rikz$Exposure  # make a new variable so that we can leave the original alone
rikz$fExp[rikz$Exposure == 8] <- 10  # assign a value of 10 to the lone beach with exposure = 8
rikz$fExp <- as.factor(rikz$fExp)  # make the new variable into a factor
summary(rikz)
#######################
# Model 3: random intercept, with effect of exposure
#######################
fm3 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 + NAP| beach), data = rikz)
#######################
# Model 3: random intercept, with effect of exposure
#######################
fm3 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 + NAP| fBeach), data = rikz)
summary(fm3)
#######################
# Model 3: random intercept, with effect of exposure
#######################
fm3a <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
summary(fm3a)
#######################
# Model 3: random intercept, with effect of exposure
#######################
fm3a <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
summary(fm3a)
anova(fm3a, fm3)
fm3b <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp + NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
summary(fm3b)
lmertest::confint(fm3b)
lmerTest::confint(fm3b)
fm3 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 + fBeach), data = rikz)
fm3 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 | fBeach), data = rikz)
fm3 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 | fBeach), data = rikz)
fm4 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp + NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
summary(fm4)
fm5 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 + NAP| fBeach), data = rikz)
anova(fm3, fm4, fm5)
fm4 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
fm5 <- lmerTest::lmer(sqrt(Richness) ~ 1 + fExp * NAP + (1 + NAP| fBeach), data = rikz)
anova(fm3, fm4, fm5)
summary(fm3)
fixef(fm3)
fm3 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 | fBeach), data = rikz)
fm3 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 | fBeach), data = rikz)
summary(fm3)
fm4 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
fm4 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
summary(fm4)
fm5 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 + NAP| fBeach), data = rikz)
summary(fm5)
anova(fm3, fm4, fm5)
summary(fm3)
a0 <- coef(summary(fm3))[1, 1]  # marginal intercept for low-exposure beaches
b0 <- coef(summary(fm3))[2, 1]  # marginal slope for low-exposure beaches
a1 <- coef(summary(fm3))[3, 1]  # difference in marginal intercepts for high vs low
b1 <- coef(summary(fm3))[4, 1]  # difference in marginal slopes for high vs low
c.mode <- ranef(fm3)$fBeach
low.beaches <- c(1, 2, 5, 8, 9)
high.beaches <- c(3, 4, 6, 7)
par(mfrow = c(1, 2))  # split the plot region
with(rikz, plot(sqrt(Richness) ~ NAP,
type     = "n",
main     = "Exposure = 8 or 10"))  # set up the axes
with(subset(rikz, fExp == "10"), points(sqrt(Richness) ~ NAP, pch = Beach))  # plot points for low exposure beaches
abline(a = a0, b = b0, col = "red", lwd = 2)  # add the average line for low-exposure beaches
for (i in 1:length(low.beaches)) {
abline(a = a0 + c.mode[low.beaches[i], 1], b = b0, col = "red", lty = "dotted")
}
# Repeat for high exposure beaches
with(rikz, plot(sqrt(Richness) ~ NAP,
type     = "n",
main     = "Exposure = 11"))  # set up the axes
with(subset(rikz, fExp == "11"), points(sqrt(Richness) ~ NAP, pch = Beach))  # plot points for low exposure beaches
abline(a = a0 + a1, b = b0 + b1, col = "blue", lwd = 2)  # add the average line for low-exposure beaches
for (i in 1:length(high.beaches)) {
abline(a = a0 + a1 + c.mode[high.beaches[i], 1], b = b0 + b1, col = "blue", lty = "dotted")
}
a0 <- fixef(fm3)[1]  # marginal intercept for low-exposure beaches
b0 <- fixef(fm3)[2]  # marginal slope for low-exposure beaches
a1 <- fixef(fm3)[3]  # difference in marginal intercepts for high vs low
b1 <- fixef(fm3)[4]  # difference in marginal slopes for high vs low
c.mode <- ranef(fm3)$fBeach
low.beaches <- c(1, 2, 5, 8, 9)
high.beaches <- c(3, 4, 6, 7)
par(mfrow = c(1, 2))  # split the plot region
with(rikz, plot(sqrt(Richness) ~ NAP,
type     = "n",
main     = "Exposure = 8 or 10"))  # set up the axes
with(subset(rikz, fExp == "10"), points(sqrt(Richness) ~ NAP, pch = Beach))  # plot points for low exposure beaches
abline(a = a0, b = b0, col = "red", lwd = 2)  # add the average line for low-exposure beaches
for (i in 1:length(low.beaches)) {
abline(a = a0 + c.mode[low.beaches[i], 1], b = b0, col = "red", lty = "dotted")
}
# Repeat for high exposure beaches
with(rikz, plot(sqrt(Richness) ~ NAP,
type     = "n",
main     = "Exposure = 11"))  # set up the axes
with(subset(rikz, fExp == "11"), points(sqrt(Richness) ~ NAP, pch = Beach))  # plot points for low exposure beaches
abline(a = a0 + a1, b = b0 + b1, col = "blue", lwd = 2)  # add the average line for low-exposure beaches
for (i in 1:length(high.beaches)) {
abline(a = a0 + a1 + c.mode[high.beaches[i], 1], b = b0 + b1, col = "blue", lty = "dotted")
}
render_book("01-LikelihoodIntro", "bookdown::gotbook")
getwd()
bookdown::render_book("01-LikelihoodIntro", "bookdown::gotbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gotbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
require(nlme)
require(lme4)
data(Dyestuff2)
summary(Dyestuff2)
with(Dyestuff2, stripchart(Yield ~ Batch, pch = 16))
fm5 <- gls(Yield ~ 1, data = Dyestuff2, correlation = corCompSymm(form = ~ 1 | Batch))
summary(fm5)
fm6 <- lme4::lmer(Yield ~ 1 + (1 | Batch), data = Dyestuff2)
summary(fm6)
rm(list = ls())
rikz <- read.table("C:/Users/krgross/Documents/Teaching/bma590/ZuurDataMixedModelling/RIKZ.txt", head = T)
with(rikz, plot(Richness ~ NAP, pch = Beach))  # raw response; note the non-constant variance
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach))  # transformation stabilizes the variance
legend("topright", leg = 1:9, pch = 1:9)
rikz$fBeach <- as.factor(rikz$Beach)
fm0 <- lm(sqrt(Richness) ~ fBeach + NAP, data = rikz)
summary(fm0)
confint(fm0, level = 0.95)
anova(fm0)
fm0.temp <- lm(sqrt(Richness) ~ fBeach + NAP - 1, data = rikz)
coef(fm0.temp)
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Fixed-effects fit, additive model"))
legend("topright", leg = 1:9, pch = 1:9)
b <- coef(fm0)["NAP"]
for(i in 1:9){
abline(a = coef(fm0.temp)[i], b = b, col = "red", lty = "dotted")
}
fm1 <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 | fBeach), data = rikz)
summary(fm1)
(beach.conditional.modes <- (fixef(fm1)["(Intercept)"] + ranef(fm1)$fBeach$`(Intercept)`))
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Random intercepts fit"))
legend("topright", leg = 1:9, pch = 1:9)
a <- coef(summary(fm1))[1, 1]
b <- coef(summary(fm1))[2, 1]
abline(a = a, b = b, col = "red", lwd = 2)
for(i in 1:9){
abline(a = beach.conditional.modes[i], b = b, col = "red", lty = "dotted")
}
fm0b <- lm(sqrt(Richness) ~ fBeach * NAP, data = rikz)
summary(fm0b)
anova(fm0, fm0b)
fm0b.temp <- lm(sqrt(Richness) ~ fBeach + fBeach:NAP - 1, data = rikz)
(fixed.params <- data.frame(beach     = 1:9,
intercept = coef(fm0b.temp)[1:9],
slope     = coef(fm0b.temp)[10:18]))
row.names(fixed.params) <- NULL
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Fixed-effects fit, with beach-NAP interaction"))
legend("topright", leg = 1:9, pch = 1:9)
for(i in 1:9){
abline(a = fixed.params$intercept[i], b = fixed.params$slope[i],
col = "red", lty = "dotted")
}
fm2 <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 + NAP | fBeach), data = rikz)
summary(fm2)
anova(fm1, fm2)
fm2a <- lmerTest::lmer(sqrt(Richness) ~ 1 + NAP + (1 | fBeach) + (0 + NAP | fBeach), data = rikz)
summary(fm2a)
anova(fm1, fm2a, fm2)
(conditional.modes  <- data.frame(beach     = 1:9,
intercept = fixef(fm2a)["(Intercept)"] + ranef(fm2a)$fBeach$`(Intercept)`,
slope     = fixef(fm2a)["NAP"] + ranef(fm2a)$fBeach$`NAP`))
par(mfrow = c(1, 2))
with(fixed.params, plot(slope ~ intercept, main = "fixed-effects fit", pch = 1:9))
with(fixed.params, plot(slope ~ intercept, main = "conditional modes", type = "n"))
with(conditional.modes, points(slope ~ intercept, pch = 1:9))
points(fixef(fm2a)[1], fixef(fm2a)[2], pch = 16, col = "red", cex = 2)
par(mfrow = c(1, 1))
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Random-coefficients fit"))
legend("topright", leg = 1:9, pch = 1:9)
for(i in 1:9){
abline(a = conditional.modes$intercept[i], b = conditional.modes$slope[i],
col = "red", lty = "dotted")
}
with(rikz, table(fBeach, Exposure))
rikz$fExp <- rikz$Exposure  # make a new variable so that we can leave the original alone
rikz$fExp[rikz$Exposure == 8] <- 10  # assign a value of 10 to the lone beach with exposure = 8
rikz$fExp <- as.factor(rikz$fExp)  # make the new variable into a factor
summary(rikz)
fm3 <- lmerTest::lmer(sqrt(Richness) ~ NAP + fExp + NAP:fExp + (1 | fBeach), data = rikz)
summary(fm3)
fm4 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 | fBeach) + (0 + NAP | fBeach),
data = rikz)
summary(fm4)
fm5 <- lmerTest::lmer(sqrt(Richness) ~ fExp * NAP + (1 + NAP| fBeach), data = rikz)
summary(fm5)
anova(fm3, fm4, fm5)
a0 <- coef(summary(fm3))[1, 1]  # marginal intercept for low-exposure beaches
b0 <- coef(summary(fm3))[2, 1]  # marginal slope for low-exposure beaches
a1 <- coef(summary(fm3))[3, 1]  # difference in marginal intercepts for high vs low
b1 <- coef(summary(fm3))[4, 1]  # difference in marginal slopes for high vs low
c.mode <- ranef(fm3)$fBeach
low.beaches <- c(1, 2, 5, 8, 9)
high.beaches <- c(3, 4, 6, 7)
par(mfrow = c(1, 2))  # split the plot region
with(rikz, plot(sqrt(Richness) ~ NAP,
type     = "n",
main     = "Exposure = 8 or 10"))  # set up the axes
with(subset(rikz, fExp == "10"), points(sqrt(Richness) ~ NAP, pch = Beach))  # plot points for low exposure beaches
abline(a = a0, b = b0, col = "red", lwd = 2)  # add the average line for low-exposure beaches
for (i in 1:length(low.beaches)) {
abline(a = a0 + c.mode[low.beaches[i], 1], b = b0, col = "red", lty = "dotted")
}
with(rikz, plot(sqrt(Richness) ~ NAP,
type     = "n",
main     = "Exposure = 11"))  # set up the axes
with(subset(rikz, fExp == "11"), points(sqrt(Richness) ~ NAP, pch = Beach))  # plot points for low exposure beaches
abline(a = a0 + a1, b = b0 + b1, col = "blue", lwd = 2)  # add the average line for low-exposure beaches
for (i in 1:length(high.beaches)) {
abline(a = a0 + a1 + c.mode[high.beaches[i], 1], b = b0 + b1, col = "blue", lty = "dotted")
}
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(1, 1))
with(rikz, plot(sqrt(Richness) ~ NAP, pch = Beach, main = "Random-coefficients fit"))
bookdown::render_book("01-LikelihoodIntro.Rmd", "bookdown::gitbook")
source('~/Teaching/bma590/bma590-fall21/r/class17.R')
