lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000), degree = 1), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 1500, 2000), degree = 3), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm3 <- lm(log(sources) ~ bs(depth, df = 12), data = st19)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
fm3 <- lm(log(sources) ~ bs(depth, df = 20), data = st19)
fm3.pred <- predict(fm3, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm3.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.975, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm3.pred$fit + qt(0.025, df = 43) * fm3.pred$se, lty = "dashed", col = "red")
linear.basis <- bs(st19$depth, knots = c(1500), degree = 1)
par(mfrow = c(1, 2))
for (i in 1:2) plot(st19$depth, linear.basis[, i], xlab = "depth", ylab = "basis function")
summary(fm1)
fm1 <- lm(log(sources) ~ bs(depth, knots = c(1500), degree = 1), data = st19)
summary(fm1)
aic(fm1)
AIC(fm1)
fm0 <- lm(log(sources) ~ 1, data = st19)
anova(fm0, fm1)
fm2 <- lm(log(sources) ~ bs(depth, knots = c(1000, 2000), degree = 3), data = st19)
fm2.pred <- predict(fm2, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
abline(v = c(1000, 2000), lty = "dotted")
fm4 <- lm(log(sources) ~ ns(depth, knots = c(1000, 2000)), data = st19)
fm4.pred <- predict(fm4, newdata = list(depth = depth.vals), se = T)
par(mfrow = c(1, 2))
with(st19, plot(log(sources) ~ depth, main = "regression spline"))
lines(depth.vals, fm2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.975, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm2.pred$fit + qt(0.025, df = 43) * fm2.pred$se, lty = "dashed", col = "red")
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
library(mgcv)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
summary(st19.sspline)
?mgcv::gam
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
summary(st19.sspline)
st19.sspline <- mgcv::gam(log(sources) ~ s(depth), data = st19, select = TRUE, gamma = 1.4)
plot(st19.sspline, se = TRUE)
with(st19, plot(log(sources) ~ depth))
st19.fit <- predict(st19.sspline,
newdata = data.frame(depth = depth.vals),
se      = TRUE)
lines(x = depth.vals, y = st19.fit$fit)
lines(x = depth.vals, y = st19.fit$fit + qt(0.975, df = 39.5) * st19.fit$se.fit, lty = "dashed")
lines(x = depth.vals, y = st19.fit$fit + qt(0.025, df = 39.5) * st19.fit$se.fit, lty = "dashed")
par(mfrow = c(2, 2))
rm(list = ls())
require(mgcv)
bird <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/Loyn.txt", head = T)
summary(bird)
bird <- bird[, -1]
pairs(bird)
bird$L.AREA <- log(bird$AREA)
bird$L.DIST <- log(bird$DIST)
bird$L.LDIST <- log(bird$LDIST)
bird$YR.ISOL <- 1987 - bird$YR.ISOL
bird <- bird[, c("ABUND", "L.AREA", "L.DIST", "L.LDIST", "YR.ISOL", "ALT", "GRAZE")]
pairs(bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) + s(YR.ISOL) +
s(GRAZE) + s(ALT), data = bird)
bird.am1 <- mgcv::gam(ABUND ~ s(L.AREA) + s(L.DIST) + s(L.LDIST) +
s(YR.ISOL) + GRAZE + s(ALT),
data = bird)
summary(bird.am1)
par(mfrow = c(2, 3))
plot(bird.am1)
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
GRAZ
bird.am2 <- gam(ABUND ~ s(L.AREA) + GRAZE, data = bird)
summary(bird.am2)
plot(bird.am2)
bird.am3 <- gam(ABUND ~ s(L.AREA), data = bird)
plot(x = bird$GRAZE, y = bird.am3$residuals)
abline(h = 0, lty = "dashed")
library(Sleuth2)
str(ex0726)
births <- ex0726
require(reshape2)
names(births) <- c("year", "DK", "NL", "CA", "US")
births.melt <- melt(births, id.vars = c("year"))
births <- births.melt
rm(births.melt)
names(births) <- c("year", "country", "pct.male")
births$pct.male <- 100 * births$pct.male
births <- subset(births, year >= 1970 & year <= 1990)
summary(births)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
fm1 <- with(births, lm(pct.male ~ year * country))
summary(fm1)
births$yr.ctr <- births$year - 1980
fm1 <- with(births, lm(pct.male ~ yr.ctr * country))
summary(fm1)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
abline(a = 51.3671 - (-0.01112 * 1980), b = -0.01112)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
abline(a = 51.26 - (-0.0054286 * 1980), b = -0.0054286)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
abline(a = 51.3709 - (0.0008442 * 1980), b = 0.0008442)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
abline(a = 51.2162 - (-0.00652 * 1980), b = -0.0065195)
require(nlme)
?gls
?varIdent
gls1 <- gls(pct.male ~ yr.ctr * country, data = births,
weights = varIdent(form = ~ 1 | country))
summary(gls1)
setwd("C:/Users/krgross/Documents/GitHub/bma590-course-notes/")
bookdown::preview_chapter("05-GeneralizedLeastSquares.Rmd", "bookdown::gitbook")
gls0 <- gls(pct.male ~ yr.ctr * country, data = births)  # OLS fit
anova(gls0, gls1)
gls0.ml <- gls(pct.male ~ yr.ctr * country, data = births, method = "ML")
gls1.ml <- gls(pct.male ~ yr.ctr * country, data = births,
weights = varIdent(form = ~ 1 | country), method = "ML")
anova(gls0.ml, gls1.ml)
summary(gls1.ml)
?corAR1
gls2 <- gls(pct.male ~ yr.ctr * country, data = births, weights = varIdent(form = ~ 1 | country),
correlation = corAR1(form = ~ 1 | country))
summary(gls2)
anova(gls1, gls2)
gls3.ml <- gls(pct.male ~ yr.ctr + country, data = births, weights = varIdent(form = ~ 1 | country),
method = "ML")
summary(gls3.ml)
anova(gls3.ml, gls1.ml)
gls4.ml <- gls(pct.male ~ yr.ctr, data = births, weights = varIdent(form = ~ 1 | country),
method = "ML")
summary(gls4.ml)
anova(gls4.ml, gls3.ml)
gls3.reml <- gls(pct.male ~ yr.ctr + country - 1, data = births, weights = varIdent(form = ~ 1 | country))
summary(gls3.reml)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
abline(a = 51.3671 + 0.00586 * 1980, b = -0.00586)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
abline(a = 51.26 + 0.00586 * 1980, b = -0.00586)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
abline(a = 51.371 + 0.00586 * 1980, b = -0.00586)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
abline(a = 51.2162 + 0.00586 * 1980, b = -0.00586)
summary(gls(pct.male ~ yr.ctr + country - 1, data = births))
gls3.reml <- gls(pct.male ~ yr.ctr + country, data = births, weights = varIdent(form = ~ 1 | country))
summary(gls3.reml)
bookdown::preview_chapter("05-GeneralizedLeastSquares.Rmd", "bookdown::gitbook")
bookdown::preview_chapter("05-GeneralizedLeastSquares.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
birds <- read.table("C:/Users/krgross/Documents/Teaching/bma590/general/ZuurDataMixedModelling/Hawaii.txt", head = T)
## extract moorhen data
moorhen <- birds[, c("Year", "Rainfall", "Moorhen.Kauai")]
birds <- read.table("C:/Users/krgross/Documents/Teaching/bma590/general/ZuurDataMixedModelling/Hawaii.txt", head = T)
## extract moorhen data
moorhen <- birds[, c("Year", "Rainfall", "Moorhen.Kauai")]
## rename variables
names(moorhen) <- c("year", "rainfall", "abundance")
## remove NAs
moorhen <- na.omit(moorhen)
with(moorhen, plot(abundance ~ year))
with(moorhen, plot(abundance ~ year))
with(moorhen, plot(log(abundance) ~ year))
with(moorhen, plot(log(abundance) ~ rainfall))
fm1 <- nlme::gls(log(abundance) ~ rainfall + year,
data = moorhen)
plot(residuals(fm1) ~ moorhen$year)
acf(residuals(fm1))
abline(h = 0, lty = "dotted")
acf(residuals(fm1))
fm2 <- nlme::gls(log(abundance) ~ rainfall + year,
data = moorhen,
correlation = corAR1(form = ~ year))
summary(fm2)
?residuals.gls
acf(residuals(fm2, type = "normalized"))
anova(fm1, fm2)
summary(fm1)
summary(fm2)
isit <- read.table("C:/Users/krgross/Documents/Teaching/bma590/bma590-fall21/data/ZuurDataMixedModelling/ISIT.txt", head = T)
st19 <- subset(isit, Station == 19)
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(log(sources) ~ depth))
head(st19)
library(splines)
st19.ns <- lm(log(sources) ~ ns(depth, df = 8), data = st19)
st19.ns.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
st19.ns.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, fm4.pred$fit, lwd = 2, col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, fm4.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
st16.fm1 <- mgcv::gam(log(sources + min_pos_val / 2) ~ s(depth, k = 20, bs = "cr"),
data = st16)
lines(depth.vals, st19.ns.pred$fit, lwd = 2, col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.975, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.025, df = 43) * fm4.pred$se, lty = "dashed", col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.975, df = 43) * st19.ns.pred$se, lty = "dashed", col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.025, df = 43) * st19.ns.pred$se, lty = "dashed", col = "red")
summary(st19.ns)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, st19.ns.pred$fit, lwd = 2, col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.975, df = 40) * st19.ns.pred$se, lty = "dashed", col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.025, df = 40) * st19.ns.pred$se, lty = "dashed", col = "red")
st16.fm1 <- mgcv::gam(log(sources + min_pos_val / 2) ~ s(depth, k = 20, bs = "cr"),
data = st16)
library(splines)
st19.ns <- lm(log(sources) ~ ns(depth, df = 7), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
st19.ns.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, st19.ns.pred$fit, lwd = 2, col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.975, df = 40) * st19.ns.pred$se, lty = "dashed", col = "red")
lines(depth.vals, st19.ns.pred$fit + qt(0.025, df = 40) * st19.ns.pred$se, lty = "dashed", col = "red")
str(st19.ns)
st19$resid
st19.ns$residuals
?acf
library(splines)
ns1 <- lm(log(sources) ~ ns(depth, df = 7), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
fm2 <- nlme::gls(log(abundance) ~ rainfall + year,
data = moorhen,
correlation = corAR1(form = ~ year))
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = corAR1(form = ~ depth))
summary(ns2)
ns1 <- lm(log(sources) ~ ns(depth, df = 3), data = st19)
summary(ns1)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
plot(st19$depth, ns1$residuals)
abline(h = 0, lty = "dotted")
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = corAR1(form = ~ depth))
summary(ns2)
# re-order by depth
st19 <- st19[order(st19$depth), ]
library(splines)
ns1 <- lm(log(sources) ~ ns(depth, df = 3), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
plot(st19$depth, ns1$residuals)
abline(h = 0, lty = "dotted")
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = corAR1(form = ~ depth))
summary(ns2)
?gls
?corCAR1
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = corCAR1(form = ~ depth))  # use corCAR1 for a continuous-time covariate
summary(ns2)
ns1 <- lm(log(sources) ~ ns(depth, df = 7), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
plot(st19$depth, ns1$residuals)
abline(h = 0, lty = "dotted")
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = corCAR1(form = ~ depth))  # use corCAR1 for a continuous-time covariate
summary(ns2)
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = corCAR1(form = ~ depth))  # use corCAR1 for a continuous-time covariate
summary(ns2)
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = corCAR1(form = ~depth))  # use corCAR1 for a continuous-time covariate
summary(ns2)
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = corCAR1(form = ~depth. fixed = FALSE))  # use corCAR1 for a continuous-time covariate
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = corCAR1(form = ~depth, fixed = FALSE))  # use corCAR1 for a continuous-time covariate
summary(ns2)
cs <- corCAR1(value = 0.3,       # starting value between 0 and 1
form  = ~ depth,   # or ~ depth | group if you have groups
fixed = FALSE)
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = cs)  # use corCAR1 for a continuous-time covariate
summary(ns2)
coef(ns2$modelStruct$corStruct, unconstrained = FALSE)  #
# rescale depth to km
st19$depth <- st19$depth / 1000
library(splines)
ns1 <- lm(log(sources) ~ ns(depth, df = 7), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
plot(st19$depth, ns1$residuals)
# rescale depth to km
st19$depth <- st19$depth / 1000
library(splines)
ns1 <- lm(log(sources) ~ ns(depth, df = 7), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(st19.ns, newdata = list(depth = depth.vals), se = T)
ns1.pred <- predict(ns1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
st19 <- subset(isit, Station == 19)
st19 <- st19[, c("SampleDepth", "Sources")]
names(st19) <- c("depth", "sources")
with(st19, plot(log(sources) ~ depth))
# re-order by depth
st19 <- st19[order(st19$depth), ]
# rescale depth to km
st19$depth <- st19$depth / 1000
library(splines)
ns1 <- lm(log(sources) ~ ns(depth, df = 7), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(ns1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
plot(st19$depth, ns1$residuals)
abline(h = 0, lty = "dotted")
cs <- corCAR1(value = 0.3,       # starting value between 0 and 1
form  = ~ depth,   # or ~ depth | group if you have groups
fixed = FALSE)
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 7),
data = st19,
correlation = cs)  # use corCAR1 for a continuous-time covariate
summary(ns2)
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = cs)  # use corCAR1 for a continuous-time covariate
summary(ns2)
library(splines)
ns1 <- lm(log(sources) ~ ns(depth, df = 3), data = st19)
depth.vals <- seq(from = min(st19$depth), to = max(st19$depth), length = 100)
ns1.pred <- predict(ns1, newdata = list(depth = depth.vals), se = T)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns1.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.025, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
plot(st19$depth, ns1$residuals)
abline(h = 0, lty = "dotted")
ns2 <- nlme::gls(log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = corCAR1(form  = ~ depth))  # use corCAR1 for a continuous-time covariate
summary(ns2)
ns2.pred <- predict(ns2, newdata = list(depth = depth.vals), se = T)
head(ns2.pred)
with(st19, plot(log(sources) ~ depth, main = "natural spline"))
lines(depth.vals, ns2.pred$fit, lwd = 2, col = "red")
lines(depth.vals, ns1.pred$fit + qt(0.975, df = 41) * ns1.pred$se, lty = "dashed", col = "red")
lines(depth.vals, ns2.pred, lwd = 2, col = "red")
plot(st19$depth, residuals(fm2, type = "normalized"))
plot(st19$depth, residuals(ns2, type = "normalized"))
abline(h = 0,  lty = "dotted")
# --- Packages ---
library(nlme)
library(splines)
# --- Fit (uses your structure; keep your scaling tweak if you used one) ---
# Example: df = 3 as in your code. Replace st19 with your data frame if named differently.
fit <- gls(
log(sources) ~ ns(depth, df = 3),
data = st19,
correlation = corCAR1(form = ~ depth),   # CAR(1) for unequally spaced depth
method = "REML"
)
# --- Build prediction grid over observed range of depth ---
nd <- data.frame(
depth = seq(min(st19$depth, na.rm = TRUE),
max(st19$depth, na.rm = TRUE),
length.out = 400)
)
# --- Design matrix for the SAME spline basis used in the fit ---
# Using the model's stored terms ensures the identical spline basis is applied to 'nd'
tt <- terms(fit)
X  <- model.matrix(tt, nd)
# --- Mean predictions and standard errors on the LOG scale ---
beta <- coef(fit)         # GLS fixed effects
Vb   <- vcov(fit)         # Covariance of GLS fixed effects
mu   <- as.numeric(X %*% beta)
se   <- sqrt(diag(X %*% Vb %*% t(X)))
# 95% confidence band for the mean (on log scale)
crit <- qnorm(0.975)
136*2/9
lo   <- mu - crit * se
hi   <- mu + crit * se
# --- Plot: data (log scale), fitted curve, and 95% confidence envelope ---
op <- par(mar = c(4.5, 4.5, 1.5, 1) + 0.1)
on.exit(par(op), add = TRUE)
library(Sleuth2)
str(ex0726)
births <- ex0726
require(reshape2)
names(births) <- c("year", "DK", "NL", "CA", "US")
births.melt <- melt(births, id.vars = c("year"))
births <- births.melt
rm(births.melt)
names(births) <- c("year", "country", "pct.male")
births$pct.male <- 100 * births$pct.male
births <- subset(births, year >= 1970 & year <= 1990)
summary(births)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
births$yr.ctr <- births$year - 1980
fm1 <- with(births, lm(pct.male ~ yr.ctr * country))
summary(fm1)
par(mfrow = c(2, 2), las = 1)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Canada"))
with(subset(births, country == "CA"), points(pct.male ~ year))
abline(a = 51.3671 - (-0.01112 * 1980), b = -0.01112)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "USA"))
with(subset(births, country == "US"), points(pct.male ~ year))
abline(a = 51.26 - (-0.0054286 * 1980), b = -0.0054286)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Denmark"))
with(subset(births, country == "DK"), points(pct.male ~ year))
abline(a = 51.3709 - (0.0008442 * 1980), b = 0.0008442)
with(births, plot(pct.male ~ year, type = "n", ylab = "percent male", main = "Netherlands"))
with(subset(births, country == "NL"), points(pct.male ~ year))
abline(a = 51.2162 - (-0.00652 * 1980), b = -0.0065195)
require(nlme)
?gls
?varIdent
gls1 <- gls(pct.male ~ yr.ctr * country, data = births,
weights = varIdent(form = ~ 1 | country))
summary(gls1)
